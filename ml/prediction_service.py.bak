#!/usr/bin/env python3
import os
import sys
import pickle
import numpy as np
import pandas as pd
import json
import logging
from datetime import datetime, timedelta

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),  # Redirect logs to stdout instead of stderr
        logging.FileHandler(os.path.join(os.path.dirname(__file__), 'logs', 'prediction.log'))
    ]
)
logger = logging.getLogger('prediction_service')

# Create logs directory if it doesn't exist
os.makedirs(os.path.join(os.path.dirname(__file__), 'logs'), exist_ok=True)


def load_models():
    """Load the trained models and scalers"""
    try:
        models_dir = os.path.join(os.path.dirname(__file__), 'models')
        # Load temperature model and scaler
        with open(os.path.join(models_dir, 'temperature_model.pkl'), 'rb') as f:
            temp_model = pickle.load(f)
        with open(os.path.join(models_dir, 'temp_scaler.pkl'), 'rb') as f:
            temp_scaler = pickle.load(f)
        # Load humidity model and scaler
        with open(os.path.join(models_dir, 'humidity_model.pkl'), 'rb') as f:
            humid_model = pickle.load(f)
        with open(os.path.join(models_dir, 'humid_scaler.pkl'), 'rb') as f:
            humid_scaler = pickle.load(f)
        logger.info("Models loaded successfully")
        return temp_model, temp_scaler, humid_model, humid_scaler
    except Exception as e:
        logger.error(f"Error loading models: {e}")
        return None, None, None, None


def predict_values(temp_model, temp_scaler, humid_model, humid_scaler,
                   curr_temp, curr_humid, prev_temp, prev_humid):
    """
    Make predictions for temperature and humidity for the next 1 hour
    """
    try:
        # Determine current time and hour
        now = datetime.now()
        hour = now.hour
        # Determine time of day category
        if 0 <= hour < 6:
            tod = 0
        elif 6 <= hour < 12:
            tod = 1
        elif 12 <= hour < 18:
            tod = 2
        else:
            tod = 3
            
        # Build DataFrame with proper feature names
        cols = ['time_of_day', 'temp_lag_1', 'temp_lag_2', 'humid_lag_1', 'humid_lag_2']
        feat_df = pd.DataFrame(
            [[tod, curr_temp, prev_temp, curr_humid, prev_humid]],
            columns=cols
        )
        
        # For 1-hour prediction, we need to make multiple steps ahead prediction
        # Here we'll use 12 steps (assuming 5-minute intervals for a 1-hour prediction)
        num_steps = 12
        
        # Initialize predicted values
        temp_predictions = []
        humid_predictions = []
        
        # Store initial values
        next_temp = curr_temp
        next_prev_temp = prev_temp
        next_humid = curr_humid
        next_prev_humid = prev_humid
        
        # Make iterative predictions for each 5-minute interval
        for step in range(num_steps):
            # Update time of day if we cross into a new category
            pred_time = now + timedelta(minutes=(step+1)*5)
            pred_hour = pred_time.hour
            
            if 0 <= pred_hour < 6:
                new_tod = 0
            elif 6 <= pred_hour < 12:
                new_tod = 1
            elif 12 <= pred_hour < 18:
                new_tod = 2
            else:
                new_tod = 3
                
            # Update features for this prediction step
            step_df = pd.DataFrame(
                [[new_tod, next_temp, next_prev_temp, next_humid, next_prev_humid]],
                columns=cols
            )
            
            # Scale features
            scaled_temp = temp_scaler.transform(step_df)
            scaled_humid = humid_scaler.transform(step_df)
            
            # Predict next values
            step_pred_temp = float(temp_model.predict(scaled_temp)[0])
            step_pred_humid = float(humid_model.predict(scaled_humid)[0])
            
            # Store predictions
            temp_predictions.append(step_pred_temp)
            humid_predictions.append(step_pred_humid)
            
            # Update values for next step
            next_prev_temp = next_temp
            next_temp = step_pred_temp
            next_prev_humid = next_humid
            next_humid = step_pred_humid
        
        # The final prediction is the value at the last step
        pred_temp = temp_predictions[-1]
        pred_humid = humid_predictions[-1]
        
        # For visualization, we also include intermediate predictions
        hourly_predictions = {
            'temperature': {
                'values': temp_predictions,
                'timestamps': [(now + timedelta(minutes=(i+1)*5)).isoformat() for i in range(num_steps)]
            },
            'humidity': {
                'values': humid_predictions,
                'timestamps': [(now + timedelta(minutes=(i+1)*5)).isoformat() for i in range(num_steps)]
            }
        }
        
        # Build intervals (wider for 1-hour prediction)
        temp_interval = 1.5  # Wider interval for longer prediction
        humid_interval = 5.0  # Wider interval for longer prediction
        lower_t = max(0.0, pred_temp - temp_interval)
        upper_t = pred_temp + temp_interval
        lower_h = max(0.0, pred_humid - humid_interval)
        upper_h = min(100.0, pred_humid + humid_interval)
        
        # Threshold logic
        threshold = 30.0
        exceed = pred_temp > threshold
        
        # Assemble output dict with Python types
        output = {
            'prediction_time': now.isoformat(),
            'temperature': {
                'current': float(curr_temp),
                'predicted': pred_temp,
                'lower_bound': lower_t,
                'upper_bound': upper_t,
                'exceeds_threshold': bool(exceed),
                'threshold': float(threshold)
            },
            'humidity': {
                'current': float(curr_humid),
                'predicted': pred_humid,
                'lower_bound': lower_h,
                'upper_bound': upper_h
            },
            'hourly_predictions': hourly_predictions,
            'time_horizon': '1_hour',
            'activate_fan': bool(exceed)
        }
        return output
    except Exception as e:
        logger.error(f"Error making predictions: {e}")
        return None


def read_input():
    """Read input JSON from stdin"""
    try:
        data = json.loads(sys.stdin.read())
        return data
    except Exception as e:
        logger.error(f"Error reading input: {e}")
        return None


def write_output(data):
    """Write JSON to stdout"""
    try:
        # Ensure JSON serializable
        sys.stdout.write(json.dumps(data))
        sys.stdout.flush()
    except Exception as e:
        logger.error(f"Error writing output data: {e}")


def main():
    try:
        temp_model, temp_scaler, humid_model, humid_scaler = load_models()
        if not all([temp_model, temp_scaler, humid_model, humid_scaler]):
            logger.error("Failed to load models")
            sys.exit(1)
        inp = read_input()
        if not inp:
            logger.error("No input data provided")
            sys.exit(1)
        curr_t = inp.get('current_temperature')
        prev_t = inp.get('previous_temperature')
        curr_h = inp.get('current_humidity')
        prev_h = inp.get('previous_humidity')
        if any(x is None for x in [curr_t, prev_t, curr_h, prev_h]):
            logger.error("Missing required input data")
            sys.exit(1)
        result = predict_values(
            temp_model, temp_scaler, humid_model, humid_scaler,
            curr_t, curr_h, prev_t, prev_h
        )
        if result is None:
            logger.error("Prediction failed")
            sys.exit(1)
        write_output(result)
    except Exception as e:
        logger.error(f"Error in main: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()