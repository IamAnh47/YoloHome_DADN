{"ast":null,"code":"import apiService from './apiService';\nconst deviceService = {\n  // Get all devices\n  async getDevices() {\n    try {\n      const response = await apiService.get('/devices');\n      return response.data.data;\n    } catch (error) {\n      console.error('Error fetching devices:', error);\n      throw error;\n    }\n  },\n  // Get device by ID\n  async getDeviceById(id) {\n    try {\n      // In a real application, we would call the API\n      const response = await apiService.get(`/devices/${id}`);\n      return response.data.data;\n    } catch (error) {\n      console.error(`Error fetching device with ID ${id}:`, error);\n      throw error;\n    }\n  },\n  // Update device status\n  async updateDeviceStatus(id, status) {\n    try {\n      // In a real application, we would call the API\n      const response = await apiService.put(`/devices/${id}`, {\n        status\n      });\n      return response.data.data;\n    } catch (error) {\n      console.error(`Error updating device status for ID ${id}:`, error);\n      throw error;\n    }\n  },\n  // Toggle device by type\n  async toggleDevicesByType(type) {\n    try {\n      // In a real application, we would call the API\n      const response = await apiService.post(`/devices/toggle-by-type`, {\n        device_type: type\n      });\n      return response.data;\n    } catch (error) {\n      console.error(`Error toggling devices of type ${type}:`, error);\n      throw error;\n    }\n  },\n  // Direct fan control\n  async controlFan(action) {\n    try {\n      // Validate action\n      if (action !== 'on' && action !== 'off') {\n        throw new Error('Invalid action. Use \"on\" or \"off\"');\n      }\n      const response = await apiService.post(`/devices/fan/${action}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error controlling fan (action: ${action}):`, error);\n      throw error;\n    }\n  },\n  // Direct light control\n  async controlLight(action) {\n    try {\n      // Validate action\n      if (action !== 'on' && action !== 'off') {\n        throw new Error('Invalid action. Use \"on\" or \"off\"');\n      }\n      const response = await apiService.post(`/devices/light/${action}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error controlling light (action: ${action}):`, error);\n      throw error;\n    }\n  },\n  // Get scheduled tasks for a device\n  async getDeviceSchedules(deviceType) {\n    try {\n      const response = await apiService.get(`/devices/${deviceType}/schedules`);\n      return response.data.data || [];\n    } catch (error) {\n      console.error(`Error fetching schedules for ${deviceType}:`, error);\n      // If API doesn't exist yet, return empty array instead of throwing error\n      return [];\n    }\n  },\n  // Schedule a device to turn on or off at a specific time\n  async scheduleDevice(deviceType, action, scheduledTime) {\n    try {\n      const response = await apiService.post(`/devices/${deviceType}/schedule`, {\n        action,\n        scheduledTime\n      });\n      return response.data;\n    } catch (error) {\n      console.error(`Error scheduling ${deviceType} ${action} at ${scheduledTime}:`, error);\n      throw error;\n    }\n  },\n  // Schedule a device to operate during a time range\n  async scheduleDeviceRange(deviceType, startTime, endTime) {\n    try {\n      const response = await apiService.post(`/devices/${deviceType}/schedule-range`, {\n        startTime,\n        endTime\n      });\n      return response.data;\n    } catch (error) {\n      console.error(`Error scheduling ${deviceType} from ${startTime} to ${endTime}:`, error);\n      throw error;\n    }\n  },\n  // Cancel a scheduled task\n  async cancelSchedule(scheduleId) {\n    try {\n      const response = await apiService.delete(`/devices/schedules/${scheduleId}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error canceling schedule ${scheduleId}:`, error);\n      throw error;\n    }\n  }\n};\nexport default deviceService;","map":{"version":3,"names":["apiService","deviceService","getDevices","response","get","data","error","console","getDeviceById","id","updateDeviceStatus","status","put","toggleDevicesByType","type","post","device_type","controlFan","action","Error","controlLight","getDeviceSchedules","deviceType","scheduleDevice","scheduledTime","scheduleDeviceRange","startTime","endTime","cancelSchedule","scheduleId","delete"],"sources":["C:/Users/tuana/University/The_Third_Year/HK242/Đồ án đa ngành/YoloHome_DADN/YoloHome_DADN/frontend/src/services/deviceService.js"],"sourcesContent":["import apiService from './apiService';\r\n\r\nconst deviceService = {\r\n  // Get all devices\r\n  async getDevices() {\r\n    try {\r\n      const response = await apiService.get('/devices');\r\n      return response.data.data;\r\n    } catch (error) {\r\n      console.error('Error fetching devices:', error);\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  // Get device by ID\r\n  async getDeviceById(id) {\r\n    try {\r\n      // In a real application, we would call the API\r\n      const response = await apiService.get(`/devices/${id}`);\r\n      return response.data.data;\r\n      \r\n    } catch (error) {\r\n      console.error(`Error fetching device with ID ${id}:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  // Update device status\r\n  async updateDeviceStatus(id, status) {\r\n    try {\r\n      // In a real application, we would call the API\r\n      const response = await apiService.put(`/devices/${id}`, { status });\r\n      return response.data.data;\r\n      \r\n    } catch (error) {\r\n      console.error(`Error updating device status for ID ${id}:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  // Toggle device by type\r\n  async toggleDevicesByType(type) {\r\n    try {\r\n      // In a real application, we would call the API\r\n      const response = await apiService.post(`/devices/toggle-by-type`, { device_type: type });\r\n      return response.data;\r\n      \r\n    } catch (error) {\r\n      console.error(`Error toggling devices of type ${type}:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  // Direct fan control\r\n  async controlFan(action) {\r\n    try {\r\n      // Validate action\r\n      if (action !== 'on' && action !== 'off') {\r\n        throw new Error('Invalid action. Use \"on\" or \"off\"');\r\n      }\r\n      \r\n      const response = await apiService.post(`/devices/fan/${action}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error controlling fan (action: ${action}):`, error);\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  // Direct light control\r\n  async controlLight(action) {\r\n    try {\r\n      // Validate action\r\n      if (action !== 'on' && action !== 'off') {\r\n        throw new Error('Invalid action. Use \"on\" or \"off\"');\r\n      }\r\n      \r\n      const response = await apiService.post(`/devices/light/${action}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error controlling light (action: ${action}):`, error);\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  // Get scheduled tasks for a device\r\n  async getDeviceSchedules(deviceType) {\r\n    try {\r\n      const response = await apiService.get(`/devices/${deviceType}/schedules`);\r\n      return response.data.data || [];\r\n    } catch (error) {\r\n      console.error(`Error fetching schedules for ${deviceType}:`, error);\r\n      // If API doesn't exist yet, return empty array instead of throwing error\r\n      return [];\r\n    }\r\n  },\r\n  \r\n  // Schedule a device to turn on or off at a specific time\r\n  async scheduleDevice(deviceType, action, scheduledTime) {\r\n    try {\r\n      const response = await apiService.post(`/devices/${deviceType}/schedule`, {\r\n        action,\r\n        scheduledTime\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error scheduling ${deviceType} ${action} at ${scheduledTime}:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  // Schedule a device to operate during a time range\r\n  async scheduleDeviceRange(deviceType, startTime, endTime) {\r\n    try {\r\n      const response = await apiService.post(`/devices/${deviceType}/schedule-range`, {\r\n        startTime,\r\n        endTime\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error scheduling ${deviceType} from ${startTime} to ${endTime}:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  // Cancel a scheduled task\r\n  async cancelSchedule(scheduleId) {\r\n    try {\r\n      const response = await apiService.delete(`/devices/schedules/${scheduleId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error canceling schedule ${scheduleId}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\nexport default deviceService;"],"mappings":"AAAA,OAAOA,UAAU,MAAM,cAAc;AAErC,MAAMC,aAAa,GAAG;EACpB;EACA,MAAMC,UAAUA,CAAA,EAAG;IACjB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMH,UAAU,CAACI,GAAG,CAAC,UAAU,CAAC;MACjD,OAAOD,QAAQ,CAACE,IAAI,CAACA,IAAI;IAC3B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACA,MAAME,aAAaA,CAACC,EAAE,EAAE;IACtB,IAAI;MACF;MACA,MAAMN,QAAQ,GAAG,MAAMH,UAAU,CAACI,GAAG,CAAC,YAAYK,EAAE,EAAE,CAAC;MACvD,OAAON,QAAQ,CAACE,IAAI,CAACA,IAAI;IAE3B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,iCAAiCG,EAAE,GAAG,EAAEH,KAAK,CAAC;MAC5D,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACA,MAAMI,kBAAkBA,CAACD,EAAE,EAAEE,MAAM,EAAE;IACnC,IAAI;MACF;MACA,MAAMR,QAAQ,GAAG,MAAMH,UAAU,CAACY,GAAG,CAAC,YAAYH,EAAE,EAAE,EAAE;QAAEE;MAAO,CAAC,CAAC;MACnE,OAAOR,QAAQ,CAACE,IAAI,CAACA,IAAI;IAE3B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uCAAuCG,EAAE,GAAG,EAAEH,KAAK,CAAC;MAClE,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACA,MAAMO,mBAAmBA,CAACC,IAAI,EAAE;IAC9B,IAAI;MACF;MACA,MAAMX,QAAQ,GAAG,MAAMH,UAAU,CAACe,IAAI,CAAC,yBAAyB,EAAE;QAAEC,WAAW,EAAEF;MAAK,CAAC,CAAC;MACxF,OAAOX,QAAQ,CAACE,IAAI;IAEtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,kCAAkCQ,IAAI,GAAG,EAAER,KAAK,CAAC;MAC/D,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACA,MAAMW,UAAUA,CAACC,MAAM,EAAE;IACvB,IAAI;MACF;MACA,IAAIA,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,KAAK,EAAE;QACvC,MAAM,IAAIC,KAAK,CAAC,mCAAmC,CAAC;MACtD;MAEA,MAAMhB,QAAQ,GAAG,MAAMH,UAAU,CAACe,IAAI,CAAC,gBAAgBG,MAAM,EAAE,CAAC;MAChE,OAAOf,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,kCAAkCY,MAAM,IAAI,EAAEZ,KAAK,CAAC;MAClE,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACA,MAAMc,YAAYA,CAACF,MAAM,EAAE;IACzB,IAAI;MACF;MACA,IAAIA,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,KAAK,EAAE;QACvC,MAAM,IAAIC,KAAK,CAAC,mCAAmC,CAAC;MACtD;MAEA,MAAMhB,QAAQ,GAAG,MAAMH,UAAU,CAACe,IAAI,CAAC,kBAAkBG,MAAM,EAAE,CAAC;MAClE,OAAOf,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,oCAAoCY,MAAM,IAAI,EAAEZ,KAAK,CAAC;MACpE,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACA,MAAMe,kBAAkBA,CAACC,UAAU,EAAE;IACnC,IAAI;MACF,MAAMnB,QAAQ,GAAG,MAAMH,UAAU,CAACI,GAAG,CAAC,YAAYkB,UAAU,YAAY,CAAC;MACzE,OAAOnB,QAAQ,CAACE,IAAI,CAACA,IAAI,IAAI,EAAE;IACjC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,gCAAgCgB,UAAU,GAAG,EAAEhB,KAAK,CAAC;MACnE;MACA,OAAO,EAAE;IACX;EACF,CAAC;EAED;EACA,MAAMiB,cAAcA,CAACD,UAAU,EAAEJ,MAAM,EAAEM,aAAa,EAAE;IACtD,IAAI;MACF,MAAMrB,QAAQ,GAAG,MAAMH,UAAU,CAACe,IAAI,CAAC,YAAYO,UAAU,WAAW,EAAE;QACxEJ,MAAM;QACNM;MACF,CAAC,CAAC;MACF,OAAOrB,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,oBAAoBgB,UAAU,IAAIJ,MAAM,OAAOM,aAAa,GAAG,EAAElB,KAAK,CAAC;MACrF,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACA,MAAMmB,mBAAmBA,CAACH,UAAU,EAAEI,SAAS,EAAEC,OAAO,EAAE;IACxD,IAAI;MACF,MAAMxB,QAAQ,GAAG,MAAMH,UAAU,CAACe,IAAI,CAAC,YAAYO,UAAU,iBAAiB,EAAE;QAC9EI,SAAS;QACTC;MACF,CAAC,CAAC;MACF,OAAOxB,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,oBAAoBgB,UAAU,SAASI,SAAS,OAAOC,OAAO,GAAG,EAAErB,KAAK,CAAC;MACvF,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACA,MAAMsB,cAAcA,CAACC,UAAU,EAAE;IAC/B,IAAI;MACF,MAAM1B,QAAQ,GAAG,MAAMH,UAAU,CAAC8B,MAAM,CAAC,sBAAsBD,UAAU,EAAE,CAAC;MAC5E,OAAO1B,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4BuB,UAAU,GAAG,EAAEvB,KAAK,CAAC;MAC/D,MAAMA,KAAK;IACb;EACF;AACF,CAAC;AAED,eAAeL,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}