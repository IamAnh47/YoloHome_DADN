{"ast":null,"code":"import apiService from '../services/apiService';\nclass SensorController {\n  static async getLatestReadings() {\n    try {\n      console.log('Fetching latest sensor readings from API');\n      const response = await apiService.get('/sensors/readings');\n      if (response.data && response.data.data) {\n        const data = response.data.data;\n        console.log('API response data:', data);\n        return {\n          // Đảm bảo là số trước khi định dạng\n          temperature: (typeof data.temperature === 'number' ? data.temperature : parseFloat(data.temperature || 0)).toFixed(1),\n          humidity: (typeof data.humidity === 'number' ? data.humidity : parseFloat(data.humidity || 0)).toFixed(1),\n          motion: Boolean(data.motion)\n        };\n      }\n      console.warn('API response structure:', JSON.stringify(response.data));\n      throw new Error('Invalid data format received from API');\n    } catch (error) {\n      console.error('Error fetching sensor readings:', error);\n      // Fallback to mock data\n      return {\n        temperature: '25.0',\n        humidity: '60.0',\n        motion: false\n      };\n    }\n  }\n  static async getSensorHistory(sensorType, timeRange = 'day') {\n    try {\n      // Lấy dữ liệu từ API\n      const response = await apiService.get(`/sensors/history/${sensorType}?limit=24`);\n      if (response.data && response.data.data) {\n        return response.data.data;\n      }\n      console.warn('API response structure:', JSON.stringify(response.data));\n      throw new Error('Invalid data format received from API');\n    } catch (error) {\n      console.error(`Error fetching ${sensorType} history:`, error);\n\n      // Fallback to mock data\n      const now = new Date();\n      const data = [];\n\n      // Generate mock data points\n      if (timeRange === 'day') {\n        // 24 hours, one point per hour\n        for (let i = 23; i >= 0; i--) {\n          const timestamp = new Date(now);\n          timestamp.setHours(now.getHours() - i);\n          let value;\n          if (sensorType === 'temperature') {\n            value = (Math.random() * 5 + 25).toFixed(1); // 25-30 degrees\n          } else if (sensorType === 'humidity') {\n            value = (Math.random() * 10 + 60).toFixed(1); // 60-70%\n          } else {\n            value = Math.random() > 0.8 ? 1 : 0; // Motion detected randomly\n          }\n          data.push({\n            timestamp: timestamp.toISOString(),\n            value: parseFloat(value)\n          });\n        }\n      }\n      return data;\n    }\n  }\n  static async getRecentAlerts() {\n    try {\n      // Fetch real alerts from API\n      const response = await apiService.get('/alerts/recent');\n      if (response.data && response.data.data && Array.isArray(response.data.data)) {\n        return response.data.data.map(alert => ({\n          id: alert.alert_id,\n          type: alert.alert_type.toLowerCase(),\n          message: alert.amessage,\n          timestamp: alert.alerted_time,\n          status: alert.status\n        }));\n      }\n\n      // Fallback to mock data if API fails or returns unexpected format\n      return this.getMockAlerts();\n    } catch (error) {\n      console.error('Error fetching alerts:', error);\n      // Fallback to mock data\n      return this.getMockAlerts();\n    }\n  }\n  static getMockAlerts() {\n    return [{\n      id: 1,\n      type: 'temperature',\n      message: 'Temperature exceeded 30°C',\n      timestamp: new Date(Date.now() - 30 * 60000).toISOString(),\n      status: 'active'\n    }, {\n      id: 2,\n      type: 'motion',\n      message: 'Motion detected in living room',\n      timestamp: new Date(Date.now() - 45 * 60000).toISOString(),\n      status: 'active'\n    }, {\n      id: 3,\n      type: 'humidity',\n      message: 'Humidity level below 30%',\n      timestamp: new Date(Date.now() - 120 * 60000).toISOString(),\n      status: 'resolved'\n    }];\n  }\n}\nexport default SensorController;","map":{"version":3,"names":["apiService","SensorController","getLatestReadings","console","log","response","get","data","temperature","parseFloat","toFixed","humidity","motion","Boolean","warn","JSON","stringify","Error","error","getSensorHistory","sensorType","timeRange","now","Date","i","timestamp","setHours","getHours","value","Math","random","push","toISOString","getRecentAlerts","Array","isArray","map","alert","id","alert_id","type","alert_type","toLowerCase","message","amessage","alerted_time","status","getMockAlerts"],"sources":["C:/Users/tuana/University/The_Third_Year/HK242/Đồ án đa ngành/YoloHome_DADN/YoloHome_DADN/frontend/src/controllers/SensorController.js"],"sourcesContent":["import apiService from '../services/apiService';\r\n\r\nclass SensorController {\r\n  static async getLatestReadings() {\r\n    try {\r\n      console.log('Fetching latest sensor readings from API');\r\n      const response = await apiService.get('/sensors/readings');\r\n      \r\n      if (response.data && response.data.data) {\r\n        const data = response.data.data;\r\n        console.log('API response data:', data);\r\n        \r\n        return {\r\n          // Đảm bảo là số trước khi định dạng\r\n          temperature: (typeof data.temperature === 'number' ? data.temperature : parseFloat(data.temperature || 0)).toFixed(1),\r\n          humidity: (typeof data.humidity === 'number' ? data.humidity : parseFloat(data.humidity || 0)).toFixed(1),\r\n          motion: Boolean(data.motion)\r\n        };\r\n      }\r\n      \r\n      console.warn('API response structure:', JSON.stringify(response.data));\r\n      throw new Error('Invalid data format received from API');\r\n    } catch (error) {\r\n      console.error('Error fetching sensor readings:', error);\r\n      // Fallback to mock data\r\n      return {\r\n        temperature: '25.0',\r\n        humidity: '60.0',\r\n        motion: false\r\n      };\r\n    }\r\n  }\r\n  \r\n  static async getSensorHistory(sensorType, timeRange = 'day') {\r\n    try {\r\n      // Lấy dữ liệu từ API\r\n      const response = await apiService.get(`/sensors/history/${sensorType}?limit=24`);\r\n      \r\n      if (response.data && response.data.data) {\r\n        return response.data.data;\r\n      }\r\n      \r\n      console.warn('API response structure:', JSON.stringify(response.data));\r\n      throw new Error('Invalid data format received from API');\r\n    } catch (error) {\r\n      console.error(`Error fetching ${sensorType} history:`, error);\r\n      \r\n      // Fallback to mock data\r\n      const now = new Date();\r\n      const data = [];\r\n      \r\n      // Generate mock data points\r\n      if (timeRange === 'day') {\r\n        // 24 hours, one point per hour\r\n        for (let i = 23; i >= 0; i--) {\r\n          const timestamp = new Date(now);\r\n          timestamp.setHours(now.getHours() - i);\r\n          \r\n          let value;\r\n          if (sensorType === 'temperature') {\r\n            value = (Math.random() * 5 + 25).toFixed(1); // 25-30 degrees\r\n          } else if (sensorType === 'humidity') {\r\n            value = (Math.random() * 10 + 60).toFixed(1); // 60-70%\r\n          } else {\r\n            value = Math.random() > 0.8 ? 1 : 0; // Motion detected randomly\r\n          }\r\n          \r\n          data.push({\r\n            timestamp: timestamp.toISOString(),\r\n            value: parseFloat(value)\r\n          });\r\n        }\r\n      }\r\n      \r\n      return data;\r\n    }\r\n  }\r\n  \r\n  static async getRecentAlerts() {\r\n    try {\r\n      // Fetch real alerts from API\r\n      const response = await apiService.get('/alerts/recent');\r\n      \r\n      if (response.data && response.data.data && Array.isArray(response.data.data)) {\r\n        return response.data.data.map(alert => ({\r\n          id: alert.alert_id,\r\n          type: alert.alert_type.toLowerCase(),\r\n          message: alert.amessage,\r\n          timestamp: alert.alerted_time,\r\n          status: alert.status\r\n        }));\r\n      }\r\n      \r\n      // Fallback to mock data if API fails or returns unexpected format\r\n      return this.getMockAlerts();\r\n    } catch (error) {\r\n      console.error('Error fetching alerts:', error);\r\n      // Fallback to mock data\r\n      return this.getMockAlerts();\r\n    }\r\n  }\r\n  \r\n  static getMockAlerts() {\r\n    return [\r\n      {\r\n        id: 1,\r\n        type: 'temperature',\r\n        message: 'Temperature exceeded 30°C',\r\n        timestamp: new Date(Date.now() - 30 * 60000).toISOString(),\r\n        status: 'active'\r\n      },\r\n      {\r\n        id: 2,\r\n        type: 'motion',\r\n        message: 'Motion detected in living room',\r\n        timestamp: new Date(Date.now() - 45 * 60000).toISOString(),\r\n        status: 'active'\r\n      },\r\n      {\r\n        id: 3,\r\n        type: 'humidity',\r\n        message: 'Humidity level below 30%',\r\n        timestamp: new Date(Date.now() - 120 * 60000).toISOString(),\r\n        status: 'resolved'\r\n      }\r\n    ];\r\n  }\r\n}\r\n\r\nexport default SensorController;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}