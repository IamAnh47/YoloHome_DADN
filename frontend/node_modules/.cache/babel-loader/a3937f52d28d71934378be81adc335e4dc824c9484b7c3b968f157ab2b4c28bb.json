{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tuana\\\\University\\\\The_Third_Year\\\\HK242\\\\\\u0110\\u1ED3 \\xE1n \\u0111a ng\\xE0nh\\\\YoloHome_DADN\\\\YoloHome_DADN\\\\frontend\\\\src\\\\components\\\\Dashboard\\\\SensorChart.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport SensorController from '../../controllers/SensorController';\nimport './SensorChart.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SensorChart = ({\n  sensorType,\n  title,\n  unit\n}) => {\n  _s();\n  const [chartData, setChartData] = useState([]);\n  const [timeRange, setTimeRange] = useState('day');\n  const [isLoading, setIsLoading] = useState(true);\n  const chartRef = useRef(null);\n  const loadChartData = useCallback(async () => {\n    setIsLoading(true);\n    try {\n      const data = await SensorController.getSensorHistory(sensorType, timeRange);\n      console.log(`Chart data for ${sensorType} (${timeRange}):`, data);\n      setChartData(data);\n    } catch (error) {\n      console.error(`Error loading ${sensorType} chart data:`, error);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [sensorType, timeRange]);\n  useEffect(() => {\n    loadChartData();\n\n    // Set up auto-refresh interval (every 5 minutes)\n    const refreshInterval = setInterval(() => {\n      loadChartData();\n    }, 5 * 60 * 1000);\n    return () => clearInterval(refreshInterval);\n  }, [sensorType, timeRange, loadChartData]);\n  const formatTime = timestamp => {\n    if (!timestamp) return '';\n    const date = new Date(timestamp);\n    if (timeRange === 'day') {\n      // For day view, show time in HH:MM format\n      return date.toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    } else {\n      // For week view, show date in MM/DD format\n      return date.toLocaleDateString([], {\n        month: 'numeric',\n        day: 'numeric'\n      });\n    }\n  };\n\n  // Find min and max values for the chart scale\n  const values = chartData.map(item => item.value);\n  const minValue = Math.max(0, Math.floor(Math.min(...(values.length ? values : [0]))) - 2);\n  const maxValue = Math.ceil(Math.max(...(values.length ? values : [100]))) + 2;\n  const getThemeColor = () => {\n    switch (sensorType) {\n      case 'temperature':\n        return {\n          main: '#FF5733',\n          gradient: ['rgba(255, 87, 51, 0.8)', 'rgba(255, 87, 51, 0)']\n        };\n      case 'humidity':\n        return {\n          main: '#3498DB',\n          gradient: ['rgba(52, 152, 219, 0.8)', 'rgba(52, 152, 219, 0)']\n        };\n      case 'motion':\n        return {\n          main: '#2ECC71',\n          gradient: ['rgba(46, 204, 113, 0.8)', 'rgba(46, 204, 113, 0)']\n        };\n      default:\n        return {\n          main: '#9B59B6',\n          gradient: ['rgba(155, 89, 182, 0.8)', 'rgba(155, 89, 182, 0)']\n        };\n    }\n  };\n  const colors = getThemeColor();\n\n  // Calculate point positions\n  const getPointCoordinates = () => {\n    if (!chartData.length) return [];\n    const chartWidth = 100; // percentage\n    const chartHeight = 150; // pixels\n    const range = maxValue - minValue;\n\n    // Calculate step based on number of points\n    const step = chartWidth / (chartData.length - 1);\n\n    // For day view, order points from oldest to newest\n    // For week view, the data is already ordered by date\n    const sortedData = timeRange === 'day' ? [...chartData].sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp)) : chartData;\n    return sortedData.map((item, index) => {\n      const x = index * step;\n      const y = chartHeight - (item.value - minValue) / range * chartHeight;\n      return {\n        x,\n        y,\n        value: item.value,\n        timestamp: item.timestamp\n      };\n    });\n  };\n  const points = getPointCoordinates();\n\n  // Generate SVG path for the line\n  const generateLinePath = () => {\n    if (points.length < 2) return '';\n    let path = `M ${points[0].x} ${points[0].y}`;\n    for (let i = 1; i < points.length; i++) {\n      // Use bezier curves for smooth lines\n      const cp1x = points[i - 1].x + (points[i].x - points[i - 1].x) / 3;\n      const cp1y = points[i - 1].y;\n      const cp2x = points[i].x - (points[i].x - points[i - 1].x) / 3;\n      const cp2y = points[i].y;\n      path += ` C ${cp1x} ${cp1y}, ${cp2x} ${cp2y}, ${points[i].x} ${points[i].y}`;\n    }\n    return path;\n  };\n\n  // Generate SVG path for the area fill\n  const generateAreaPath = () => {\n    if (points.length < 2) return '';\n    let path = generateLinePath();\n\n    // Add bottom border to create closed path for fill\n    path += ` L ${points[points.length - 1].x} 150 L ${points[0].x} 150 Z`;\n    return path;\n  };\n  const getChartDescription = () => {\n    if (timeRange === 'day') {\n      return `Showing the 20 most recent readings from today`;\n    } else {\n      return `Showing daily averages for the past 7 days`;\n    }\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sensor-chart\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-header\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-loading\",\n        children: \"Loading data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sensor-chart\",\n    ref: chartRef,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: timeRange === 'day' ? 'active' : '',\n          onClick: () => setTimeRange('day'),\n          children: \"Day\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: timeRange === 'week' ? 'active' : '',\n          onClick: () => setTimeRange('week'),\n          children: \"Week\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-description\",\n      children: getChartDescription()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: chartData.length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-y-axis\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [maxValue, unit]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [Math.round((maxValue + minValue) / 2), unit]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [minValue, unit]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-line-view\",\n          children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n            width: \"100%\",\n            height: \"150\",\n            className: \"line-chart\",\n            children: [/*#__PURE__*/_jsxDEV(\"defs\", {\n              children: /*#__PURE__*/_jsxDEV(\"linearGradient\", {\n                id: `gradient-${sensorType}`,\n                x1: \"0\",\n                y1: \"0\",\n                x2: \"0\",\n                y2: \"1\",\n                children: [/*#__PURE__*/_jsxDEV(\"stop\", {\n                  offset: \"0%\",\n                  stopColor: colors.gradient[0]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 191,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"stop\", {\n                  offset: \"100%\",\n                  stopColor: colors.gradient[1]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 192,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 190,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n              d: generateAreaPath(),\n              fill: `url(#gradient-${sensorType})`,\n              className: \"chart-area\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n              d: generateLinePath(),\n              stroke: colors.main,\n              strokeWidth: \"2\",\n              fill: \"none\",\n              className: \"chart-line\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 17\n            }, this), points.map((point, index) => /*#__PURE__*/_jsxDEV(\"g\", {\n              className: \"data-point-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n                cx: point.x + \"%\",\n                cy: point.y,\n                r: \"4\",\n                fill: \"white\",\n                stroke: colors.main,\n                strokeWidth: \"2\",\n                className: \"data-point\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 215,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                x: point.x + \"%\",\n                y: point.y - 10,\n                textAnchor: \"middle\",\n                className: \"data-label\",\n                children: [point.value, unit]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 224,\n                columnNumber: 21\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"x-axis-labels\",\n            children: points.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: points.filter((_, i) => timeRange === 'day' ? i % Math.ceil(points.length / 5) === 0 || i === points.length - 1 : true // Show all labels for week view\n              ).map((point, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"x-label\",\n                style: {\n                  left: `${point.x}%`\n                },\n                children: formatTime(point.timestamp)\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 246,\n                columnNumber: 23\n              }, this))\n            }, void 0, false)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-data-message\",\n        children: \"No data available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 5\n  }, this);\n};\n_s(SensorChart, \"0T0+hCSCntMGEinKospj3AJa0V4=\");\n_c = SensorChart;\nexport default SensorChart;\nvar _c;\n$RefreshReg$(_c, \"SensorChart\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","SensorController","jsxDEV","_jsxDEV","Fragment","_Fragment","SensorChart","sensorType","title","unit","_s","chartData","setChartData","timeRange","setTimeRange","isLoading","setIsLoading","chartRef","loadChartData","data","getSensorHistory","console","log","error","refreshInterval","setInterval","clearInterval","formatTime","timestamp","date","Date","toLocaleTimeString","hour","minute","toLocaleDateString","month","day","values","map","item","value","minValue","Math","max","floor","min","length","maxValue","ceil","getThemeColor","main","gradient","colors","getPointCoordinates","chartWidth","chartHeight","range","step","sortedData","sort","a","b","index","x","y","points","generateLinePath","path","i","cp1x","cp1y","cp2x","cp2y","generateAreaPath","getChartDescription","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","onClick","round","width","height","id","x1","y1","x2","y2","offset","stopColor","d","fill","stroke","strokeWidth","point","cx","cy","r","textAnchor","filter","_","style","left","_c","$RefreshReg$"],"sources":["C:/Users/tuana/University/The_Third_Year/HK242/Đồ án đa ngành/YoloHome_DADN/YoloHome_DADN/frontend/src/components/Dashboard/SensorChart.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\r\nimport SensorController from '../../controllers/SensorController';\r\nimport './SensorChart.css';\r\n\r\nconst SensorChart = ({ sensorType, title, unit }) => {\r\n  const [chartData, setChartData] = useState([]);\r\n  const [timeRange, setTimeRange] = useState('day');\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const chartRef = useRef(null);\r\n  \r\n  const loadChartData = useCallback(async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      const data = await SensorController.getSensorHistory(sensorType, timeRange);\r\n      console.log(`Chart data for ${sensorType} (${timeRange}):`, data);\r\n      setChartData(data);\r\n    } catch (error) {\r\n      console.error(`Error loading ${sensorType} chart data:`, error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [sensorType, timeRange]);\r\n  \r\n  useEffect(() => {\r\n    loadChartData();\r\n    \r\n    // Set up auto-refresh interval (every 5 minutes)\r\n    const refreshInterval = setInterval(() => {\r\n      loadChartData();\r\n    }, 5 * 60 * 1000);\r\n    \r\n    return () => clearInterval(refreshInterval);\r\n  }, [sensorType, timeRange, loadChartData]);\r\n  \r\n  const formatTime = (timestamp) => {\r\n    if (!timestamp) return '';\r\n    const date = new Date(timestamp);\r\n    \r\n    if (timeRange === 'day') {\r\n      // For day view, show time in HH:MM format\r\n      return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n    } else {\r\n      // For week view, show date in MM/DD format\r\n      return date.toLocaleDateString([], { month: 'numeric', day: 'numeric' });\r\n    }\r\n  };\r\n  \r\n  // Find min and max values for the chart scale\r\n  const values = chartData.map(item => item.value);\r\n  const minValue = Math.max(0, Math.floor(Math.min(...(values.length ? values : [0]))) - 2);\r\n  const maxValue = Math.ceil(Math.max(...(values.length ? values : [100]))) + 2;\r\n  \r\n  const getThemeColor = () => {\r\n    switch(sensorType) {\r\n      case 'temperature':\r\n        return {\r\n          main: '#FF5733',\r\n          gradient: ['rgba(255, 87, 51, 0.8)', 'rgba(255, 87, 51, 0)']\r\n        };\r\n      case 'humidity':\r\n        return {\r\n          main: '#3498DB',\r\n          gradient: ['rgba(52, 152, 219, 0.8)', 'rgba(52, 152, 219, 0)']\r\n        };\r\n      case 'motion':\r\n        return {\r\n          main: '#2ECC71',\r\n          gradient: ['rgba(46, 204, 113, 0.8)', 'rgba(46, 204, 113, 0)']\r\n        };\r\n      default:\r\n        return {\r\n          main: '#9B59B6',\r\n          gradient: ['rgba(155, 89, 182, 0.8)', 'rgba(155, 89, 182, 0)'] \r\n        };\r\n    }\r\n  };\r\n  \r\n  const colors = getThemeColor();\r\n  \r\n  // Calculate point positions\r\n  const getPointCoordinates = () => {\r\n    if (!chartData.length) return [];\r\n    \r\n    const chartWidth = 100; // percentage\r\n    const chartHeight = 150; // pixels\r\n    const range = maxValue - minValue;\r\n    \r\n    // Calculate step based on number of points\r\n    const step = chartWidth / (chartData.length - 1);\r\n    \r\n    // For day view, order points from oldest to newest\r\n    // For week view, the data is already ordered by date\r\n    const sortedData = timeRange === 'day' \r\n      ? [...chartData].sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp))\r\n      : chartData;\r\n    \r\n    return sortedData.map((item, index) => {\r\n      const x = index * step;\r\n      const y = chartHeight - ((item.value - minValue) / range * chartHeight);\r\n      return { x, y, value: item.value, timestamp: item.timestamp };\r\n    });\r\n  };\r\n  \r\n  const points = getPointCoordinates();\r\n  \r\n  // Generate SVG path for the line\r\n  const generateLinePath = () => {\r\n    if (points.length < 2) return '';\r\n    \r\n    let path = `M ${points[0].x} ${points[0].y}`;\r\n    \r\n    for (let i = 1; i < points.length; i++) {\r\n      // Use bezier curves for smooth lines\r\n      const cp1x = points[i-1].x + (points[i].x - points[i-1].x) / 3;\r\n      const cp1y = points[i-1].y;\r\n      const cp2x = points[i].x - (points[i].x - points[i-1].x) / 3;\r\n      const cp2y = points[i].y;\r\n      path += ` C ${cp1x} ${cp1y}, ${cp2x} ${cp2y}, ${points[i].x} ${points[i].y}`;\r\n    }\r\n    \r\n    return path;\r\n  };\r\n  \r\n  // Generate SVG path for the area fill\r\n  const generateAreaPath = () => {\r\n    if (points.length < 2) return '';\r\n    \r\n    let path = generateLinePath();\r\n    \r\n    // Add bottom border to create closed path for fill\r\n    path += ` L ${points[points.length-1].x} 150 L ${points[0].x} 150 Z`;\r\n    \r\n    return path;\r\n  };\r\n  \r\n  const getChartDescription = () => {\r\n    if (timeRange === 'day') {\r\n      return `Showing the 20 most recent readings from today`;\r\n    } else {\r\n      return `Showing daily averages for the past 7 days`;\r\n    }\r\n  };\r\n  \r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"sensor-chart\">\r\n        <div className=\"chart-header\">\r\n          <h3>{title}</h3>\r\n        </div>\r\n        <div className=\"chart-loading\">Loading data...</div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <div className=\"sensor-chart\" ref={chartRef}>\r\n      <div className=\"chart-header\">\r\n        <h3>{title}</h3>\r\n        <div className=\"chart-controls\">\r\n          <button \r\n            className={timeRange === 'day' ? 'active' : ''} \r\n            onClick={() => setTimeRange('day')}\r\n          >\r\n            Day\r\n          </button>\r\n          <button \r\n            className={timeRange === 'week' ? 'active' : ''} \r\n            onClick={() => setTimeRange('week')}\r\n          >\r\n            Week\r\n          </button>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"chart-description\">{getChartDescription()}</div>\r\n      \r\n      <div className=\"chart-container\">\r\n        {chartData.length > 0 ? (\r\n          <>\r\n            <div className=\"chart-y-axis\">\r\n              <span>{maxValue}{unit}</span>\r\n              <span>{Math.round((maxValue + minValue) / 2)}{unit}</span>\r\n              <span>{minValue}{unit}</span>\r\n            </div>\r\n            \r\n            <div className=\"chart-line-view\">\r\n              <svg width=\"100%\" height=\"150\" className=\"line-chart\">\r\n                {/* Define gradient fill */}\r\n                <defs>\r\n                  <linearGradient id={`gradient-${sensorType}`} x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                    <stop offset=\"0%\" stopColor={colors.gradient[0]} />\r\n                    <stop offset=\"100%\" stopColor={colors.gradient[1]} />\r\n                  </linearGradient>\r\n                </defs>\r\n                \r\n                {/* Area fill */}\r\n                <path \r\n                  d={generateAreaPath()} \r\n                  fill={`url(#gradient-${sensorType})`} \r\n                  className=\"chart-area\"\r\n                />\r\n                \r\n                {/* Line */}\r\n                <path \r\n                  d={generateLinePath()} \r\n                  stroke={colors.main} \r\n                  strokeWidth=\"2\" \r\n                  fill=\"none\" \r\n                  className=\"chart-line\"\r\n                />\r\n                \r\n                {/* Data points */}\r\n                {points.map((point, index) => (\r\n                  <g key={index} className=\"data-point-group\">\r\n                    <circle \r\n                      cx={point.x + \"%\"} \r\n                      cy={point.y} \r\n                      r=\"4\" \r\n                      fill=\"white\" \r\n                      stroke={colors.main} \r\n                      strokeWidth=\"2\"\r\n                      className=\"data-point\"\r\n                    />\r\n                    <text \r\n                      x={point.x + \"%\"} \r\n                      y={point.y - 10} \r\n                      textAnchor=\"middle\" \r\n                      className=\"data-label\"\r\n                    >\r\n                      {point.value}{unit}\r\n                    </text>\r\n                  </g>\r\n                ))}\r\n              </svg>\r\n              \r\n              {/* X-axis labels */}\r\n              <div className=\"x-axis-labels\">\r\n                {points.length > 0 && (\r\n                  <>\r\n                    {/* Show fewer labels for better readability */}\r\n                    {points.filter((_, i) => \r\n                      timeRange === 'day' \r\n                        ? i % Math.ceil(points.length / 5) === 0 || i === points.length - 1\r\n                        : true // Show all labels for week view\r\n                    ).map((point, index) => (\r\n                      <div \r\n                        key={index} \r\n                        className=\"x-label\" \r\n                        style={{ left: `${point.x}%` }}\r\n                      >\r\n                        {formatTime(point.timestamp)}\r\n                      </div>\r\n                    ))}\r\n                  </>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </>\r\n        ) : (\r\n          <div className=\"no-data-message\">No data available</div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SensorChart; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}