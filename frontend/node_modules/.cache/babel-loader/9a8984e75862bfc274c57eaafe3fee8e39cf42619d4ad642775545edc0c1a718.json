{"ast":null,"code":"import apiService from './apiService';\nimport notificationService from './notificationService';\n\n// Lớp dịch vụ quản lý cảnh báo\nclass AlertService {\n  constructor() {\n    // Biến lưu thời gian kiểm tra cảnh báo cuối cùng\n    this.lastAlertCheck = null;\n    // Cache cho cảnh báo gần đây nhất\n    this.latestAlertId = null;\n  }\n  /**\r\n   * Lấy danh sách cảnh báo gần đây nhất\r\n   * @param {number} limit - Số lượng cảnh báo trả về\r\n   * @returns {Promise<Array>} - Danh sách cảnh báo\r\n   */\n  async getRecentAlerts(limit = 10) {\n    try {\n      // Thêm cache buster để tránh caching\n      const cacheBuster = `?_t=${Date.now()}&limit=${limit}`;\n      const response = await apiService.get(`/alerts/recent${cacheBuster}`);\n      if (response.data && response.data.data) {\n        const alerts = response.data.data.map(alert => ({\n          id: alert.alert_id,\n          deviceId: alert.device_id,\n          sensorId: alert.sensor_id,\n          type: alert.alert_type,\n          message: alert.amessage,\n          timestamp: alert.alerted_time,\n          status: alert.status\n        }));\n        return alerts;\n      }\n      return [];\n    } catch (error) {\n      console.error('Error fetching recent alerts:', error);\n      return [];\n    }\n  }\n\n  /**\r\n   * Kiểm tra cảnh báo mới\r\n   * @returns {Promise<Array>} - Danh sách cảnh báo mới\r\n   */\n  async checkNewAlerts() {\n    try {\n      // Nếu chưa có thời gian kiểm tra, lấy thời gian hiện tại trừ đi 1 phút\n      if (!this.lastAlertCheck) {\n        const oneMinuteAgo = new Date();\n        oneMinuteAgo.setMinutes(oneMinuteAgo.getMinutes() - 1);\n        this.lastAlertCheck = oneMinuteAgo;\n      }\n\n      // Lấy cảnh báo gần đây nhất\n      const alerts = await this.getRecentAlerts(5);\n\n      // Nếu không có cảnh báo\n      if (!alerts.length) {\n        this.lastAlertCheck = new Date();\n        return [];\n      }\n\n      // Lọc ra cảnh báo mới (sau thời gian kiểm tra cuối cùng)\n      const newAlerts = alerts.filter(alert => {\n        const alertTime = new Date(alert.timestamp);\n        return alertTime > this.lastAlertCheck;\n      });\n\n      // Cập nhật thời gian kiểm tra\n      this.lastAlertCheck = new Date();\n      return newAlerts;\n    } catch (error) {\n      console.error('Error checking new alerts:', error);\n      this.lastAlertCheck = new Date();\n      return [];\n    }\n  }\n\n  /**\r\n   * Hiển thị thông báo cho cảnh báo\r\n   * @param {Object} alert - Thông tin cảnh báo\r\n   */\n  showAlertNotification(alert) {\n    // Xác định loại thông báo dựa vào loại cảnh báo\n    let type = 'info';\n    if (alert.type.includes('High')) {\n      type = 'warning';\n    } else if (alert.type.includes('Low')) {\n      type = 'info';\n    }\n\n    // Hiển thị thông báo\n    notificationService.showAlert(alert.message, type);\n  }\n\n  /**\r\n   * Kiểm tra và hiển thị cảnh báo mới\r\n   * Phương thức này được gọi định kỳ\r\n   */\n  async checkAndNotifyNewAlerts() {\n    try {\n      const newAlerts = await this.checkNewAlerts();\n\n      // Hiển thị thông báo cho mỗi cảnh báo mới\n      newAlerts.forEach(alert => {\n        this.showAlertNotification(alert);\n      });\n      return newAlerts;\n    } catch (error) {\n      console.error('Error checking and notifying new alerts:', error);\n      return [];\n    }\n  }\n}\n\n// Singleton instance\nconst alertService = new AlertService();\nexport default alertService;","map":{"version":3,"names":["apiService","notificationService","AlertService","constructor","lastAlertCheck","latestAlertId","getRecentAlerts","limit","cacheBuster","Date","now","response","get","data","alerts","map","alert","id","alert_id","deviceId","device_id","sensorId","sensor_id","type","alert_type","message","amessage","timestamp","alerted_time","status","error","console","checkNewAlerts","oneMinuteAgo","setMinutes","getMinutes","length","newAlerts","filter","alertTime","showAlertNotification","includes","showAlert","checkAndNotifyNewAlerts","forEach","alertService"],"sources":["C:/Users/tuana/University/The_Third_Year/HK242/Đồ án đa ngành/YoloHome_DADN/YoloHome_DADN/frontend/src/services/alertService.js"],"sourcesContent":["import apiService from './apiService';\r\nimport notificationService from './notificationService';\r\n\r\n// Lớp dịch vụ quản lý cảnh báo\r\nclass AlertService {\r\n  // Biến lưu thời gian kiểm tra cảnh báo cuối cùng\r\n  lastAlertCheck = null;\r\n  \r\n  // Cache cho cảnh báo gần đây nhất\r\n  latestAlertId = null;\r\n  \r\n  /**\r\n   * Lấy danh sách cảnh báo gần đây nhất\r\n   * @param {number} limit - Số lượng cảnh báo trả về\r\n   * @returns {Promise<Array>} - Danh sách cảnh báo\r\n   */\r\n  async getRecentAlerts(limit = 10) {\r\n    try {\r\n      // Thêm cache buster để tránh caching\r\n      const cacheBuster = `?_t=${Date.now()}&limit=${limit}`;\r\n      const response = await apiService.get(`/alerts/recent${cacheBuster}`);\r\n      \r\n      if (response.data && response.data.data) {\r\n        const alerts = response.data.data.map(alert => ({\r\n          id: alert.alert_id,\r\n          deviceId: alert.device_id,\r\n          sensorId: alert.sensor_id,\r\n          type: alert.alert_type,\r\n          message: alert.amessage,\r\n          timestamp: alert.alerted_time,\r\n          status: alert.status\r\n        }));\r\n        \r\n        return alerts;\r\n      }\r\n      \r\n      return [];\r\n    } catch (error) {\r\n      console.error('Error fetching recent alerts:', error);\r\n      return [];\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Kiểm tra cảnh báo mới\r\n   * @returns {Promise<Array>} - Danh sách cảnh báo mới\r\n   */\r\n  async checkNewAlerts() {\r\n    try {\r\n      // Nếu chưa có thời gian kiểm tra, lấy thời gian hiện tại trừ đi 1 phút\r\n      if (!this.lastAlertCheck) {\r\n        const oneMinuteAgo = new Date();\r\n        oneMinuteAgo.setMinutes(oneMinuteAgo.getMinutes() - 1);\r\n        this.lastAlertCheck = oneMinuteAgo;\r\n      }\r\n      \r\n      // Lấy cảnh báo gần đây nhất\r\n      const alerts = await this.getRecentAlerts(5);\r\n      \r\n      // Nếu không có cảnh báo\r\n      if (!alerts.length) {\r\n        this.lastAlertCheck = new Date();\r\n        return [];\r\n      }\r\n      \r\n      // Lọc ra cảnh báo mới (sau thời gian kiểm tra cuối cùng)\r\n      const newAlerts = alerts.filter(alert => {\r\n        const alertTime = new Date(alert.timestamp);\r\n        return alertTime > this.lastAlertCheck;\r\n      });\r\n      \r\n      // Cập nhật thời gian kiểm tra\r\n      this.lastAlertCheck = new Date();\r\n      \r\n      return newAlerts;\r\n    } catch (error) {\r\n      console.error('Error checking new alerts:', error);\r\n      this.lastAlertCheck = new Date();\r\n      return [];\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Hiển thị thông báo cho cảnh báo\r\n   * @param {Object} alert - Thông tin cảnh báo\r\n   */\r\n  showAlertNotification(alert) {\r\n    // Xác định loại thông báo dựa vào loại cảnh báo\r\n    let type = 'info';\r\n    if (alert.type.includes('High')) {\r\n      type = 'warning';\r\n    } else if (alert.type.includes('Low')) {\r\n      type = 'info';\r\n    }\r\n    \r\n    // Hiển thị thông báo\r\n    notificationService.showAlert(alert.message, type);\r\n  }\r\n  \r\n  /**\r\n   * Kiểm tra và hiển thị cảnh báo mới\r\n   * Phương thức này được gọi định kỳ\r\n   */\r\n  async checkAndNotifyNewAlerts() {\r\n    try {\r\n      const newAlerts = await this.checkNewAlerts();\r\n      \r\n      // Hiển thị thông báo cho mỗi cảnh báo mới\r\n      newAlerts.forEach(alert => {\r\n        this.showAlertNotification(alert);\r\n      });\r\n      \r\n      return newAlerts;\r\n    } catch (error) {\r\n      console.error('Error checking and notifying new alerts:', error);\r\n      return [];\r\n    }\r\n  }\r\n}\r\n\r\n// Singleton instance\r\nconst alertService = new AlertService();\r\nexport default alertService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}