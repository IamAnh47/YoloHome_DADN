{"ast":null,"code":"import apiService from '../services/apiService';\nclass SensorController {\n  /**\r\n   * Check if data is fresh for a specific data type\r\n   * @param {string} dataType - Type of data (readings, history, alerts)\r\n   * @param {string} [subType] - Subtype for history data (temperature, humidity, etc.)\r\n   * @returns {boolean} True if data is fresh, false otherwise\r\n   */\n  static isDataFresh(dataType, subType = null) {\n    const now = Date.now();\n    if (dataType === 'history' && subType) {\n      // For history data with subtype (like temperature or humidity)\n      if (!this.sensorDataTimestamps.history[subType]) return false;\n      return now - this.sensorDataTimestamps.history[subType] < this.cacheTTL.history;\n    }\n\n    // For other data types\n    return now - this.sensorDataTimestamps[dataType] < this.cacheTTL[dataType];\n  }\n\n  /**\r\n   * Update timestamp for a specific data type\r\n   * @param {string} dataType - Type of data (readings, history, alerts)\r\n   * @param {string} [subType] - Subtype for history data (temperature, humidity, etc.)\r\n   */\n  static updateTimestamp(dataType, subType = null) {\n    const now = Date.now();\n    if (dataType === 'history' && subType) {\n      if (!this.sensorDataTimestamps.history[subType]) {\n        this.sensorDataTimestamps.history[subType] = now;\n      } else {\n        this.sensorDataTimestamps.history[subType] = now;\n      }\n    } else {\n      this.sensorDataTimestamps[dataType] = now;\n    }\n  }\n\n  /**\r\n   * Get latest sensor readings with automatic cache management\r\n   * @param {boolean} [forceFresh=false] - Force fetching fresh data\r\n   * @param {string} [specificSensor=null] - Optional specific sensor type to refresh ('temperature', 'humidity', 'motion')\r\n   * @returns {Promise<Object>} Latest sensor reading data\r\n   */\n  static async getLatestReadings(forceFresh = false, specificSensor = null) {\n    try {\n      if (!this.isDataFresh('readings') || forceFresh) {\n        console.log(`Fetching latest ${specificSensor || 'all'} sensor readings from API`);\n\n        // Add cache buster to prevent caching\n        const cacheBuster = `?_t=${Date.now()}`;\n        let endpoint = '/sensors/readings';\n\n        // If a specific sensor is requested, use a more targeted endpoint\n        if (specificSensor && ['temperature', 'humidity', 'motion'].includes(specificSensor)) {\n          endpoint = `/sensors/readings/${specificSensor}`;\n        }\n        const response = await apiService.get(endpoint + cacheBuster);\n        if (response.data && response.data.data) {\n          const data = response.data.data;\n          console.log('API response data:', data);\n\n          // Format data consistently\n          const formattedData = {\n            // Ensure values are numbers before formatting\n            temperature: (typeof data.temperature === 'number' ? data.temperature : parseFloat(data.temperature || 0)).toFixed(1),\n            humidity: (typeof data.humidity === 'number' ? data.humidity : parseFloat(data.humidity || 0)).toFixed(1),\n            motion: Boolean(data.motion)\n          };\n\n          // Update cache and timestamp\n          this.cache.readings = formattedData;\n          this.updateTimestamp('readings');\n          return formattedData;\n        }\n        console.warn('API response structure:', JSON.stringify(response.data));\n        throw new Error('Invalid data format received from API');\n      } else {\n        console.log('Using cached sensor readings');\n        return this.getFromCache('readings');\n      }\n    } catch (error) {\n      console.error('Error fetching sensor readings:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Get sensor history data with cache management\r\n   * @param {string} sensorType - Type of sensor (temperature, humidity, motion)\r\n   * @param {string} timeRange - Time range for the history data (day, week)\r\n   * @param {boolean} [forceFresh=false] - Force fetching fresh data\r\n   * @returns {Promise<Array>} Sensor history data\r\n   */\n  static async getSensorHistory(sensorType, timeRange = 'day', forceFresh = false) {\n    try {\n      if (!this.isDataFresh('history', sensorType) || forceFresh) {\n        console.log(`Fetching ${sensorType} ${timeRange} history data from API`);\n\n        // Get data from API with the specific timeRange\n        const limit = timeRange === 'day' ? 30 : 7;\n        const cacheBuster = `?timeRange=${timeRange}&limit=${limit}&_t=${Date.now()}`;\n        const response = await apiService.get(`/sensors/history/${sensorType}${cacheBuster}`);\n        if (response.data && response.data.data) {\n          // Ensure data is properly formatted for charts\n          const formattedData = response.data.data.map(item => ({\n            timestamp: item.timestamp,\n            value: typeof item.value === 'number' ? item.value : parseFloat(item.value || 0)\n          }));\n\n          // Store data in cache with the key that includes timeRange\n          const cacheKey = `${sensorType}_${timeRange}`;\n          if (!this.cache.history[cacheKey]) {\n            this.cache.history[cacheKey] = [];\n          }\n          this.cache.history[cacheKey] = formattedData;\n\n          // Update timestamp for this history subtype\n          this.updateTimestamp('history', sensorType);\n\n          // Additional logging to debug\n          console.log(`Received ${sensorType} ${timeRange} data:`, response.data);\n          return formattedData;\n        }\n        console.warn('API response structure:', JSON.stringify(response.data));\n        throw new Error('Invalid data format received from API');\n      } else {\n        console.log(`Using cached ${sensorType} history data for ${timeRange}`);\n        return this.getFromCache('history', sensorType, timeRange);\n      }\n    } catch (error) {\n      console.error(`Error fetching ${sensorType} history:`, error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Get recent alerts with cache management\r\n   * @param {boolean} [forceFresh=false] - Force fetching fresh data\r\n   * @returns {Promise<Array>} Recent alerts\r\n   */\n  static async getRecentAlerts(forceFresh = false) {\n    try {\n      if (!this.isDataFresh('alerts') || forceFresh) {\n        // Fetch real alerts from API with cache buster\n        const cacheBuster = `?_t=${Date.now()}`;\n        const response = await apiService.get('/alerts/recent' + cacheBuster);\n        if (response.data && response.data.data && Array.isArray(response.data.data)) {\n          const alertsData = response.data.data.map(alert => ({\n            id: alert.alert_id,\n            type: alert.alert_type.toLowerCase(),\n            message: alert.amessage,\n            timestamp: alert.alerted_time,\n            status: alert.status\n          }));\n\n          // Update cache and timestamp\n          this.cache.alerts = alertsData;\n          this.updateTimestamp('alerts');\n          return alertsData;\n        } else {\n          // If API returns invalid format or empty data, set empty array\n          this.cache.alerts = [];\n          this.updateTimestamp('alerts');\n          return [];\n        }\n      } else {\n        console.log('Using cached alerts data');\n        return this.getFromCache('alerts');\n      }\n    } catch (error) {\n      console.error('Error fetching alerts:', error);\n      // Return empty array instead of throwing error\n      this.cache.alerts = [];\n      this.updateTimestamp('alerts');\n      return [];\n    }\n  }\n\n  /**\r\n   * Get data from cache\r\n   * @param {string} dataType - Type of data (readings, history, alerts)\r\n   * @param {string} [subType] - Subtype for history data (e.g., 'temperature')\r\n   * @param {string} [timeRange] - Time range for history data (e.g., 'day', 'week')\r\n   * @returns {Object|Array} Cached data\r\n   */\n  static getFromCache(dataType, subType = null, timeRange = 'day') {\n    // Return from appropriate cache based on data type\n    if (dataType === 'history' && subType) {\n      const cacheKey = `${subType}_${timeRange}`;\n      if (!this.cache.history[cacheKey]) {\n        console.log(`No cached data for ${subType} ${timeRange}, returning empty array`);\n        return [];\n      }\n      return this.cache.history[cacheKey];\n    } else if (dataType === 'readings') {\n      if (!this.cache.readings) {\n        return {\n          temperature: '0.0',\n          humidity: '0.0',\n          motion: false\n        };\n      }\n      return this.cache.readings;\n    } else if (dataType === 'alerts') {\n      if (!this.cache.alerts || this.cache.alerts.length === 0) {\n        return [];\n      }\n      return this.cache.alerts;\n    }\n    console.log(`Unknown cache type: ${dataType}, returning empty array`);\n    return [];\n  }\n\n  /**\r\n   * Get feed data from Adafruit IO by date\r\n   * @param {string} feedType - Type of feed (temperature, humidity, motion, fan, light)\r\n   * @param {string} [startDate=null] - Start date in YYYY-MM-DD format\r\n   * @param {string} [endDate=null] - End date in YYYY-MM-DD format\r\n   * @param {number} [limit=50] - Maximum number of records to return\r\n   * @param {boolean} [forceFresh=false] - Force fetching fresh data\r\n   * @returns {Promise<Array>} Feed data with timestamps\r\n   */\n  static async getFeedDataByDate(feedType, startDate = null, endDate = null, limit = 50, forceFresh = false) {\n    try {\n      console.log(`Fetching ${feedType} feed data by date range`);\n\n      // Build query params\n      let params = [];\n      if (startDate) params.push(`startDate=${startDate}`);\n      if (endDate) params.push(`endDate=${endDate}`);\n      if (limit) params.push(`limit=${limit}`);\n\n      // Add cache buster to prevent caching\n      params.push(`_t=${Date.now()}`);\n      const queryString = params.length > 0 ? `?${params.join('&')}` : '';\n      const response = await apiService.get(`/feeds/${feedType}/data${queryString}`);\n      if (response.data && response.data.data) {\n        // Format the data for charts\n        const formattedData = response.data.data.map(item => ({\n          id: item.id,\n          timestamp: item.timestamp,\n          value: item.value,\n          feed: item.feed\n        }));\n        return formattedData;\n      }\n      console.warn('Invalid data format received from API');\n      return [];\n    } catch (error) {\n      console.error(`Error fetching ${feedType} feed data:`, error);\n      return [];\n    }\n  }\n}\n// Cache storage for different data types\nSensorController.cache = {\n  readings: null,\n  history: {},\n  alerts: []\n};\n// Cached data timestamps\nSensorController.sensorDataTimestamps = {\n  readings: 0,\n  history: {},\n  alerts: 0\n};\n// Cache TTL values in milliseconds\nSensorController.cacheTTL = {\n  readings: 5000,\n  // 5 seconds for current readings\n  history: 5000,\n  // 5 seconds for history data\n  alerts: 5000 // 5 seconds for alerts\n};\nexport default SensorController;","map":{"version":3,"names":["apiService","SensorController","isDataFresh","dataType","subType","now","Date","sensorDataTimestamps","history","cacheTTL","updateTimestamp","getLatestReadings","forceFresh","specificSensor","console","log","cacheBuster","endpoint","includes","response","get","data","formattedData","temperature","parseFloat","toFixed","humidity","motion","Boolean","cache","readings","warn","JSON","stringify","Error","getFromCache","error","getSensorHistory","sensorType","timeRange","limit","map","item","timestamp","value","cacheKey","getRecentAlerts","Array","isArray","alertsData","alert","id","alert_id","type","alert_type","toLowerCase","message","amessage","alerted_time","status","alerts","length","getFeedDataByDate","feedType","startDate","endDate","params","push","queryString","join","feed"],"sources":["C:/Users/tuana/University/The_Third_Year/HK242/Đồ án đa ngành/YoloHome_DADN/YoloHome_DADN/frontend/src/controllers/SensorController.js"],"sourcesContent":["import apiService from '../services/apiService';\r\n\r\nclass SensorController {\r\n  // Cache storage for different data types\r\n  static cache = {\r\n    readings: null,\r\n    history: {},\r\n    alerts: []\r\n  };\r\n  \r\n  // Cached data timestamps\r\n  static sensorDataTimestamps = {\r\n    readings: 0,\r\n    history: {},\r\n    alerts: 0\r\n  };\r\n  \r\n  // Cache TTL values in milliseconds\r\n  static cacheTTL = {\r\n    readings: 5000,  // 5 seconds for current readings\r\n    history: 5000,   // 5 seconds for history data\r\n    alerts: 5000     // 5 seconds for alerts\r\n  };\r\n  \r\n  /**\r\n   * Check if data is fresh for a specific data type\r\n   * @param {string} dataType - Type of data (readings, history, alerts)\r\n   * @param {string} [subType] - Subtype for history data (temperature, humidity, etc.)\r\n   * @returns {boolean} True if data is fresh, false otherwise\r\n   */\r\n  static isDataFresh(dataType, subType = null) {\r\n    const now = Date.now();\r\n    \r\n    if (dataType === 'history' && subType) {\r\n      // For history data with subtype (like temperature or humidity)\r\n      if (!this.sensorDataTimestamps.history[subType]) return false;\r\n      return (now - this.sensorDataTimestamps.history[subType]) < this.cacheTTL.history;\r\n    }\r\n    \r\n    // For other data types\r\n    return (now - this.sensorDataTimestamps[dataType]) < this.cacheTTL[dataType];\r\n  }\r\n  \r\n  /**\r\n   * Update timestamp for a specific data type\r\n   * @param {string} dataType - Type of data (readings, history, alerts)\r\n   * @param {string} [subType] - Subtype for history data (temperature, humidity, etc.)\r\n   */\r\n  static updateTimestamp(dataType, subType = null) {\r\n    const now = Date.now();\r\n    \r\n    if (dataType === 'history' && subType) {\r\n      if (!this.sensorDataTimestamps.history[subType]) {\r\n        this.sensorDataTimestamps.history[subType] = now;\r\n      } else {\r\n        this.sensorDataTimestamps.history[subType] = now;\r\n      }\r\n    } else {\r\n      this.sensorDataTimestamps[dataType] = now;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get latest sensor readings with automatic cache management\r\n   * @param {boolean} [forceFresh=false] - Force fetching fresh data\r\n   * @param {string} [specificSensor=null] - Optional specific sensor type to refresh ('temperature', 'humidity', 'motion')\r\n   * @returns {Promise<Object>} Latest sensor reading data\r\n   */\r\n  static async getLatestReadings(forceFresh = false, specificSensor = null) {\r\n    try {\r\n      if (!this.isDataFresh('readings') || forceFresh) {\r\n        console.log(`Fetching latest ${specificSensor || 'all'} sensor readings from API`);\r\n        \r\n        // Add cache buster to prevent caching\r\n        const cacheBuster = `?_t=${Date.now()}`;\r\n        let endpoint = '/sensors/readings';\r\n        \r\n        // If a specific sensor is requested, use a more targeted endpoint\r\n        if (specificSensor && ['temperature', 'humidity', 'motion'].includes(specificSensor)) {\r\n          endpoint = `/sensors/readings/${specificSensor}`;\r\n        }\r\n        \r\n        const response = await apiService.get(endpoint + cacheBuster);\r\n      \r\n      if (response.data && response.data.data) {\r\n        const data = response.data.data;\r\n        console.log('API response data:', data);\r\n        \r\n          // Format data consistently\r\n          const formattedData = {\r\n            // Ensure values are numbers before formatting\r\n          temperature: (typeof data.temperature === 'number' ? data.temperature : parseFloat(data.temperature || 0)).toFixed(1),\r\n          humidity: (typeof data.humidity === 'number' ? data.humidity : parseFloat(data.humidity || 0)).toFixed(1),\r\n          motion: Boolean(data.motion)\r\n        };\r\n          \r\n          // Update cache and timestamp\r\n          this.cache.readings = formattedData;\r\n          this.updateTimestamp('readings');\r\n          \r\n          return formattedData;\r\n      }\r\n      \r\n      console.warn('API response structure:', JSON.stringify(response.data));\r\n      throw new Error('Invalid data format received from API');\r\n      } else {\r\n        console.log('Using cached sensor readings');\r\n        return this.getFromCache('readings');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching sensor readings:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Get sensor history data with cache management\r\n   * @param {string} sensorType - Type of sensor (temperature, humidity, motion)\r\n   * @param {string} timeRange - Time range for the history data (day, week)\r\n   * @param {boolean} [forceFresh=false] - Force fetching fresh data\r\n   * @returns {Promise<Array>} Sensor history data\r\n   */\r\n  static async getSensorHistory(sensorType, timeRange = 'day', forceFresh = false) {\r\n    try {\r\n      if (!this.isDataFresh('history', sensorType) || forceFresh) {\r\n        console.log(`Fetching ${sensorType} ${timeRange} history data from API`);\r\n        \r\n        // Get data from API with the specific timeRange\r\n        const limit = timeRange === 'day' ? 30 : 7; \r\n        const cacheBuster = `?timeRange=${timeRange}&limit=${limit}&_t=${Date.now()}`;\r\n        const response = await apiService.get(`/sensors/history/${sensorType}${cacheBuster}`);\r\n        \r\n        if (response.data && response.data.data) {\r\n          // Ensure data is properly formatted for charts\r\n          const formattedData = response.data.data.map(item => ({\r\n            timestamp: item.timestamp,\r\n            value: typeof item.value === 'number' ? item.value : parseFloat(item.value || 0)\r\n          }));\r\n          \r\n          // Store data in cache with the key that includes timeRange\r\n          const cacheKey = `${sensorType}_${timeRange}`;\r\n          if (!this.cache.history[cacheKey]) {\r\n            this.cache.history[cacheKey] = [];\r\n          }\r\n          this.cache.history[cacheKey] = formattedData;\r\n          \r\n          // Update timestamp for this history subtype\r\n          this.updateTimestamp('history', sensorType);\r\n          \r\n          // Additional logging to debug\r\n          console.log(`Received ${sensorType} ${timeRange} data:`, response.data);\r\n          \r\n          return formattedData;\r\n        }\r\n        \r\n        console.warn('API response structure:', JSON.stringify(response.data));\r\n        throw new Error('Invalid data format received from API');\r\n      } else {\r\n        console.log(`Using cached ${sensorType} history data for ${timeRange}`);\r\n        return this.getFromCache('history', sensorType, timeRange);\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error fetching ${sensorType} history:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Get recent alerts with cache management\r\n   * @param {boolean} [forceFresh=false] - Force fetching fresh data\r\n   * @returns {Promise<Array>} Recent alerts\r\n   */\r\n  static async getRecentAlerts(forceFresh = false) {\r\n    try {\r\n      if (!this.isDataFresh('alerts') || forceFresh) {\r\n        // Fetch real alerts from API with cache buster\r\n        const cacheBuster = `?_t=${Date.now()}`;\r\n        const response = await apiService.get('/alerts/recent' + cacheBuster);\r\n      \r\n      if (response.data && response.data.data && Array.isArray(response.data.data)) {\r\n          const alertsData = response.data.data.map(alert => ({\r\n          id: alert.alert_id,\r\n          type: alert.alert_type.toLowerCase(),\r\n          message: alert.amessage,\r\n          timestamp: alert.alerted_time,\r\n          status: alert.status\r\n        }));\r\n          \r\n          // Update cache and timestamp\r\n          this.cache.alerts = alertsData;\r\n          this.updateTimestamp('alerts');\r\n          \r\n          return alertsData;\r\n        } else {\r\n          // If API returns invalid format or empty data, set empty array\r\n          this.cache.alerts = [];\r\n          this.updateTimestamp('alerts');\r\n          return [];\r\n        }\r\n      } else {\r\n        console.log('Using cached alerts data');\r\n        return this.getFromCache('alerts');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching alerts:', error);\r\n      // Return empty array instead of throwing error\r\n      this.cache.alerts = [];\r\n      this.updateTimestamp('alerts');\r\n      return [];\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Get data from cache\r\n   * @param {string} dataType - Type of data (readings, history, alerts)\r\n   * @param {string} [subType] - Subtype for history data (e.g., 'temperature')\r\n   * @param {string} [timeRange] - Time range for history data (e.g., 'day', 'week')\r\n   * @returns {Object|Array} Cached data\r\n   */\r\n  static getFromCache(dataType, subType = null, timeRange = 'day') {\r\n    // Return from appropriate cache based on data type\r\n    if (dataType === 'history' && subType) {\r\n      const cacheKey = `${subType}_${timeRange}`;\r\n      if (!this.cache.history[cacheKey]) {\r\n        console.log(`No cached data for ${subType} ${timeRange}, returning empty array`);\r\n        return [];\r\n      }\r\n      return this.cache.history[cacheKey];\r\n    } else if (dataType === 'readings') {\r\n      if (!this.cache.readings) {\r\n        return {\r\n          temperature: '0.0',\r\n          humidity: '0.0',\r\n          motion: false\r\n        };\r\n      }\r\n      return this.cache.readings;\r\n    } else if (dataType === 'alerts') {\r\n      if (!this.cache.alerts || this.cache.alerts.length === 0) {\r\n        return [];\r\n      }\r\n      return this.cache.alerts;\r\n    }\r\n    \r\n    console.log(`Unknown cache type: ${dataType}, returning empty array`);\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Get feed data from Adafruit IO by date\r\n   * @param {string} feedType - Type of feed (temperature, humidity, motion, fan, light)\r\n   * @param {string} [startDate=null] - Start date in YYYY-MM-DD format\r\n   * @param {string} [endDate=null] - End date in YYYY-MM-DD format\r\n   * @param {number} [limit=50] - Maximum number of records to return\r\n   * @param {boolean} [forceFresh=false] - Force fetching fresh data\r\n   * @returns {Promise<Array>} Feed data with timestamps\r\n   */\r\n  static async getFeedDataByDate(feedType, startDate = null, endDate = null, limit = 50, forceFresh = false) {\r\n    try {\r\n      console.log(`Fetching ${feedType} feed data by date range`);\r\n      \r\n      // Build query params\r\n      let params = [];\r\n      if (startDate) params.push(`startDate=${startDate}`);\r\n      if (endDate) params.push(`endDate=${endDate}`);\r\n      if (limit) params.push(`limit=${limit}`);\r\n      \r\n      // Add cache buster to prevent caching\r\n      params.push(`_t=${Date.now()}`);\r\n      \r\n      const queryString = params.length > 0 ? `?${params.join('&')}` : '';\r\n      const response = await apiService.get(`/feeds/${feedType}/data${queryString}`);\r\n      \r\n      if (response.data && response.data.data) {\r\n        // Format the data for charts\r\n        const formattedData = response.data.data.map(item => ({\r\n          id: item.id,\r\n          timestamp: item.timestamp,\r\n          value: item.value,\r\n          feed: item.feed\r\n        }));\r\n        \r\n        return formattedData;\r\n      }\r\n      \r\n      console.warn('Invalid data format received from API');\r\n      return [];\r\n    } catch (error) {\r\n      console.error(`Error fetching ${feedType} feed data:`, error);\r\n      return [];\r\n    }\r\n  }\r\n}\r\n\r\nexport default SensorController;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}