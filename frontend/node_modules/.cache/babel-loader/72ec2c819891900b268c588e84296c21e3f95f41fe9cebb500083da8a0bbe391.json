{"ast":null,"code":"import apiService from '../services/apiService';\nclass SystemController {\n  /**\r\n   * Lấy trạng thái toàn bộ hệ thống (thiết bị và cảm biến)\r\n   * @returns {Promise<Object>} Dữ liệu tất cả thiết bị và cảm biến\r\n   */\n  static async getSystemStatus() {\n    try {\n      console.log('Fetching system status from API');\n      const response = await apiService.get('/status');\n      if (response.data && response.data.data) {\n        return response.data.data;\n      }\n      console.warn('Invalid API response structure:', JSON.stringify(response.data));\n      throw new Error('Invalid data format from API');\n    } catch (error) {\n      console.error('Error fetching system status:', error);\n\n      // Trả về dữ liệu mẫu khi không kết nối được API\n      return {\n        devices: {\n          fan: {\n            status: false,\n            device_id: 2,\n            name: 'Smart Fan',\n            location: 'Bedroom'\n          },\n          light: {\n            status: false,\n            device_id: 1,\n            name: 'Smart Light',\n            location: 'Living Room'\n          }\n        },\n        sensors: {\n          temperature: '25.0',\n          humidity: '60.0',\n          motion: false\n        },\n        timestamp: new Date().toISOString()\n      };\n    }\n  }\n\n  /**\r\n   * Điều khiển quạt\r\n   * @param {boolean} turnOn - true để bật, false để tắt\r\n   * @returns {Promise<Object>} Kết quả điều khiển\r\n   */\n  static async controlFan(turnOn) {\n    try {\n      const action = turnOn ? 'on' : 'off';\n      const response = await apiService.post(`/devices/fan/${action}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error controlling fan (${turnOn ? 'ON' : 'OFF'}):`, error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Điều khiển đèn\r\n   * @param {boolean} turnOn - true để bật, false để tắt\r\n   * @returns {Promise<Object>} Kết quả điều khiển\r\n   */\n  static async controlLight(turnOn) {\n    try {\n      const action = turnOn ? 'on' : 'off';\n      const response = await apiService.post(`/devices/light/${action}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error controlling light (${turnOn ? 'ON' : 'OFF'}):`, error);\n      throw error;\n    }\n  }\n}\nexport default SystemController;","map":{"version":3,"names":["apiService","SystemController","getSystemStatus","console","log","response","get","data","warn","JSON","stringify","Error","error","devices","fan","status","device_id","name","location","light","sensors","temperature","humidity","motion","timestamp","Date","toISOString","controlFan","turnOn","action","post","controlLight"],"sources":["C:/Users/tuana/University/The_Third_Year/HK242/Đồ án đa ngành/YoloHome_DADN/YoloHome_DADN/frontend/src/controllers/SystemController.js"],"sourcesContent":["import apiService from '../services/apiService';\r\n\r\nclass SystemController {\r\n  /**\r\n   * Lấy trạng thái toàn bộ hệ thống (thiết bị và cảm biến)\r\n   * @returns {Promise<Object>} Dữ liệu tất cả thiết bị và cảm biến\r\n   */\r\n  static async getSystemStatus() {\r\n    try {\r\n      console.log('Fetching system status from API');\r\n      const response = await apiService.get('/status');\r\n      \r\n      if (response.data && response.data.data) {\r\n        return response.data.data;\r\n      }\r\n      \r\n      console.warn('Invalid API response structure:', JSON.stringify(response.data));\r\n      throw new Error('Invalid data format from API');\r\n    } catch (error) {\r\n      console.error('Error fetching system status:', error);\r\n      \r\n      // Trả về dữ liệu mẫu khi không kết nối được API\r\n      return {\r\n        devices: {\r\n          fan: {\r\n            status: false,\r\n            device_id: 2,\r\n            name: 'Smart Fan',\r\n            location: 'Bedroom'\r\n          },\r\n          light: {\r\n            status: false,\r\n            device_id: 1,\r\n            name: 'Smart Light',\r\n            location: 'Living Room'\r\n          }\r\n        },\r\n        sensors: {\r\n          temperature: '25.0',\r\n          humidity: '60.0',\r\n          motion: false\r\n        },\r\n        timestamp: new Date().toISOString()\r\n      };\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Điều khiển quạt\r\n   * @param {boolean} turnOn - true để bật, false để tắt\r\n   * @returns {Promise<Object>} Kết quả điều khiển\r\n   */\r\n  static async controlFan(turnOn) {\r\n    try {\r\n      const action = turnOn ? 'on' : 'off';\r\n      const response = await apiService.post(`/devices/fan/${action}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error controlling fan (${turnOn ? 'ON' : 'OFF'}):`, error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Điều khiển đèn\r\n   * @param {boolean} turnOn - true để bật, false để tắt\r\n   * @returns {Promise<Object>} Kết quả điều khiển\r\n   */\r\n  static async controlLight(turnOn) {\r\n    try {\r\n      const action = turnOn ? 'on' : 'off';\r\n      const response = await apiService.post(`/devices/light/${action}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error controlling light (${turnOn ? 'ON' : 'OFF'}):`, error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport default SystemController; "],"mappings":"AAAA,OAAOA,UAAU,MAAM,wBAAwB;AAE/C,MAAMC,gBAAgB,CAAC;EACrB;AACF;AACA;AACA;EACE,aAAaC,eAAeA,CAAA,EAAG;IAC7B,IAAI;MACFC,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;MAC9C,MAAMC,QAAQ,GAAG,MAAML,UAAU,CAACM,GAAG,CAAC,SAAS,CAAC;MAEhD,IAAID,QAAQ,CAACE,IAAI,IAAIF,QAAQ,CAACE,IAAI,CAACA,IAAI,EAAE;QACvC,OAAOF,QAAQ,CAACE,IAAI,CAACA,IAAI;MAC3B;MAEAJ,OAAO,CAACK,IAAI,CAAC,iCAAiC,EAAEC,IAAI,CAACC,SAAS,CAACL,QAAQ,CAACE,IAAI,CAAC,CAAC;MAC9E,MAAM,IAAII,KAAK,CAAC,8BAA8B,CAAC;IACjD,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdT,OAAO,CAACS,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;;MAErD;MACA,OAAO;QACLC,OAAO,EAAE;UACPC,GAAG,EAAE;YACHC,MAAM,EAAE,KAAK;YACbC,SAAS,EAAE,CAAC;YACZC,IAAI,EAAE,WAAW;YACjBC,QAAQ,EAAE;UACZ,CAAC;UACDC,KAAK,EAAE;YACLJ,MAAM,EAAE,KAAK;YACbC,SAAS,EAAE,CAAC;YACZC,IAAI,EAAE,aAAa;YACnBC,QAAQ,EAAE;UACZ;QACF,CAAC;QACDE,OAAO,EAAE;UACPC,WAAW,EAAE,MAAM;UACnBC,QAAQ,EAAE,MAAM;UAChBC,MAAM,EAAE;QACV,CAAC;QACDC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACpC,CAAC;IACH;EACF;;EAEA;AACF;AACA;AACA;AACA;EACE,aAAaC,UAAUA,CAACC,MAAM,EAAE;IAC9B,IAAI;MACF,MAAMC,MAAM,GAAGD,MAAM,GAAG,IAAI,GAAG,KAAK;MACpC,MAAMvB,QAAQ,GAAG,MAAML,UAAU,CAAC8B,IAAI,CAAC,gBAAgBD,MAAM,EAAE,CAAC;MAChE,OAAOxB,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdT,OAAO,CAACS,KAAK,CAAC,0BAA0BgB,MAAM,GAAG,IAAI,GAAG,KAAK,IAAI,EAAEhB,KAAK,CAAC;MACzE,MAAMA,KAAK;IACb;EACF;;EAEA;AACF;AACA;AACA;AACA;EACE,aAAamB,YAAYA,CAACH,MAAM,EAAE;IAChC,IAAI;MACF,MAAMC,MAAM,GAAGD,MAAM,GAAG,IAAI,GAAG,KAAK;MACpC,MAAMvB,QAAQ,GAAG,MAAML,UAAU,CAAC8B,IAAI,CAAC,kBAAkBD,MAAM,EAAE,CAAC;MAClE,OAAOxB,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdT,OAAO,CAACS,KAAK,CAAC,4BAA4BgB,MAAM,GAAG,IAAI,GAAG,KAAK,IAAI,EAAEhB,KAAK,CAAC;MAC3E,MAAMA,KAAK;IACb;EACF;AACF;AAEA,eAAeX,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}