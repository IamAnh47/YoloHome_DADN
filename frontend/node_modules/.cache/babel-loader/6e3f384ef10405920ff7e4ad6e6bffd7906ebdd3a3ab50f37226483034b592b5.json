{"ast":null,"code":"import DeviceModel from '../models/DeviceModel';\nimport apiService from '../services/apiService';\nimport deviceService from '../services/deviceService';\nclass DeviceController {\n  static async getAllDevices() {\n    try {\n      // Fetch devices from the API through deviceService\n      const devices = await deviceService.getDevices();\n\n      // Map backend properties to frontend model properties\n      return devices.map(device => new DeviceModel({\n        id: device.device_id,\n        name: device.device_name,\n        type: device.device_type,\n        location: device.dlocation,\n        status: device.status,\n        lastUpdated: device.created_time || new Date().toISOString()\n      }));\n    } catch (error) {\n      console.error('Error fetching devices:', error);\n      throw error;\n    }\n  }\n  static async getDeviceById(id) {\n    try {\n      const response = await apiService.get(`/devices/${id}`);\n      if (response.data && response.data.data) {\n        const device = response.data.data;\n        return new DeviceModel({\n          id: device.device_id,\n          name: device.device_name,\n          type: device.device_type,\n          location: device.dlocation,\n          status: device.status,\n          lastUpdated: device.created_time || new Date().toISOString()\n        });\n      }\n      throw new Error('Device not found');\n    } catch (error) {\n      console.error(`Error fetching device with id ${id}:`, error);\n      throw error;\n    }\n  }\n  static async updateDeviceStatus(id, status) {\n    try {\n      // Call the API to update the device status\n      const response = await apiService.put(`/devices/${id}`, {\n        status\n      });\n      return new DeviceModel({\n        id: response.data.device_id,\n        name: response.data.device_name,\n        type: response.data.device_type,\n        location: response.data.dlocation,\n        status: response.data.status,\n        lastUpdated: response.data.created_time || new Date().toISOString()\n      });\n    } catch (error) {\n      console.error(`Error updating device status for id ${id}:`, error);\n      throw error;\n    }\n  }\n  static async getDeviceStats() {\n    try {\n      // Fetch stats from the API\n      const response = await apiService.get('/devices/stats');\n      if (response.data && response.data.data) {\n        return {\n          total: parseInt(response.data.data.total) || 0,\n          online: parseInt(response.data.data.online) || 0,\n          offline: parseInt(response.data.data.offline) || 0\n        };\n      }\n      throw new Error('Invalid device stats format received from API');\n    } catch (error) {\n      console.error('Error fetching device stats:', error);\n      throw error;\n    }\n  }\n  static async toggleDeviceByType(deviceType) {\n    try {\n      // Call the API endpoint to toggle devices by type\n      // Pass device_type instead of type to match backend expectations\n      const response = await apiService.post('/devices/toggle-by-type', {\n        device_type: deviceType\n      });\n\n      // Handle response data\n      if (response.data) {\n        return {\n          success: response.data.success,\n          devices: response.data.data ? response.data.data.map(device => new DeviceModel({\n            id: device.device_id,\n            name: device.device_name,\n            type: device.device_type,\n            location: device.dlocation,\n            status: device.status,\n            lastUpdated: device.created_time || new Date().toISOString()\n          })) : []\n        };\n      }\n      return {\n        success: false,\n        devices: []\n      };\n    } catch (error) {\n      console.error(`Error toggling devices of type ${deviceType}:`, error);\n      throw error;\n    }\n  }\n  static async controlFan(action) {\n    try {\n      // Use the deviceService to control the fan\n      const result = await deviceService.controlFan(action);\n\n      // Get the latest device state directly after sending command\n      // This ensures we get the status after the feed update and database sync\n      await new Promise(resolve => setTimeout(resolve, 500)); // Short delay for DB update\n      const devices = await this.getAllDevices();\n      const fanDevice = devices.find(device => device.type === 'fan');\n      return {\n        success: result.success,\n        message: result.message,\n        data: fanDevice || result.data\n      };\n    } catch (error) {\n      console.error(`Error controlling fan (${action}):`, error);\n      throw error;\n    }\n  }\n  static async controlLight(action) {\n    try {\n      // Use the deviceService to control the light\n      const result = await deviceService.controlLight(action);\n\n      // Get the latest device state directly after sending command\n      // This ensures we get the status after the feed update and database sync\n      await new Promise(resolve => setTimeout(resolve, 500)); // Short delay for DB update\n      const devices = await this.getAllDevices();\n      const lightDevice = devices.find(device => device.type === 'light');\n      return {\n        success: result.success,\n        message: result.message,\n        data: lightDevice || result.data\n      };\n    } catch (error) {\n      console.error(`Error controlling light (${action}):`, error);\n      throw error;\n    }\n  }\n}\nexport default DeviceController;","map":{"version":3,"names":["DeviceModel","apiService","deviceService","DeviceController","getAllDevices","devices","getDevices","map","device","id","device_id","name","device_name","type","device_type","location","dlocation","status","lastUpdated","created_time","Date","toISOString","error","console","getDeviceById","response","get","data","Error","updateDeviceStatus","put","getDeviceStats","total","parseInt","online","offline","toggleDeviceByType","deviceType","post","success","controlFan","action","result","Promise","resolve","setTimeout","fanDevice","find","message","controlLight","lightDevice"],"sources":["C:/Users/tuana/University/The_Third_Year/HK242/Đồ án đa ngành/YoloHome_DADN/YoloHome_DADN/frontend/src/controllers/DeviceController.js"],"sourcesContent":["import DeviceModel from '../models/DeviceModel';\r\nimport apiService from '../services/apiService';\r\nimport deviceService from '../services/deviceService';\r\n\r\nclass DeviceController {\r\n  static async getAllDevices() {\r\n    try {\r\n      // Fetch devices from the API through deviceService\r\n      const devices = await deviceService.getDevices();\r\n      \r\n      // Map backend properties to frontend model properties\r\n      return devices.map(device => new DeviceModel({\r\n        id: device.device_id,\r\n        name: device.device_name,\r\n        type: device.device_type,\r\n        location: device.dlocation,\r\n        status: device.status,\r\n        lastUpdated: device.created_time || new Date().toISOString()\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error fetching devices:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  static async getDeviceById(id) {\r\n    try {\r\n      const response = await apiService.get(`/devices/${id}`);\r\n      \r\n      if (response.data && response.data.data) {\r\n        const device = response.data.data;\r\n        return new DeviceModel({\r\n          id: device.device_id,\r\n          name: device.device_name,\r\n          type: device.device_type,\r\n          location: device.dlocation,\r\n          status: device.status,\r\n          lastUpdated: device.created_time || new Date().toISOString()\r\n        });\r\n      }\r\n      \r\n      throw new Error('Device not found');\r\n    } catch (error) {\r\n      console.error(`Error fetching device with id ${id}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  static async updateDeviceStatus(id, status) {\r\n    try {\r\n      // Call the API to update the device status\r\n      const response = await apiService.put(`/devices/${id}`, { status });\r\n      return new DeviceModel({\r\n        id: response.data.device_id,\r\n        name: response.data.device_name,\r\n        type: response.data.device_type,\r\n        location: response.data.dlocation,\r\n        status: response.data.status,\r\n        lastUpdated: response.data.created_time || new Date().toISOString()\r\n      });\r\n    } catch (error) {\r\n      console.error(`Error updating device status for id ${id}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  static async getDeviceStats() {\r\n    try {\r\n      // Fetch stats from the API\r\n      const response = await apiService.get('/devices/stats');\r\n      \r\n      if (response.data && response.data.data) {\r\n        return {\r\n          total: parseInt(response.data.data.total) || 0,\r\n          online: parseInt(response.data.data.online) || 0,\r\n          offline: parseInt(response.data.data.offline) || 0\r\n        };\r\n      }\r\n      \r\n      throw new Error('Invalid device stats format received from API');\r\n    } catch (error) {\r\n      console.error('Error fetching device stats:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  static async toggleDeviceByType(deviceType) {\r\n    try {\r\n      // Call the API endpoint to toggle devices by type\r\n      // Pass device_type instead of type to match backend expectations\r\n      const response = await apiService.post('/devices/toggle-by-type', { device_type: deviceType });\r\n      \r\n      // Handle response data\r\n      if (response.data) {\r\n        return {\r\n          success: response.data.success,\r\n          devices: response.data.data ? response.data.data.map(device => new DeviceModel({\r\n            id: device.device_id,\r\n            name: device.device_name,\r\n            type: device.device_type,\r\n            location: device.dlocation,\r\n            status: device.status,\r\n            lastUpdated: device.created_time || new Date().toISOString()\r\n          })) : []\r\n        };\r\n      }\r\n      \r\n      return {\r\n        success: false,\r\n        devices: []\r\n      };\r\n    } catch (error) {\r\n      console.error(`Error toggling devices of type ${deviceType}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  static async controlFan(action) {\r\n    try {\r\n      // Use the deviceService to control the fan\r\n      const result = await deviceService.controlFan(action);\r\n      \r\n      // Get the latest device state directly after sending command\r\n      // This ensures we get the status after the feed update and database sync\r\n      await new Promise(resolve => setTimeout(resolve, 500)); // Short delay for DB update\r\n      const devices = await this.getAllDevices();\r\n      const fanDevice = devices.find(device => device.type === 'fan');\r\n      \r\n      return {\r\n        success: result.success,\r\n        message: result.message,\r\n        data: fanDevice || result.data\r\n      };\r\n    } catch (error) {\r\n      console.error(`Error controlling fan (${action}):`, error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  static async controlLight(action) {\r\n    try {\r\n      // Use the deviceService to control the light\r\n      const result = await deviceService.controlLight(action);\r\n      \r\n      // Get the latest device state directly after sending command\r\n      // This ensures we get the status after the feed update and database sync\r\n      await new Promise(resolve => setTimeout(resolve, 500)); // Short delay for DB update\r\n      const devices = await this.getAllDevices();\r\n      const lightDevice = devices.find(device => device.type === 'light');\r\n      \r\n      return {\r\n        success: result.success,\r\n        message: result.message,\r\n        data: lightDevice || result.data\r\n      };\r\n    } catch (error) {\r\n      console.error(`Error controlling light (${action}):`, error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport default DeviceController;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}