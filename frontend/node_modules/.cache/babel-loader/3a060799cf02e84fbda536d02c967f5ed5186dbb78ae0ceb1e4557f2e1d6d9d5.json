{"ast":null,"code":"import apiService from '../services/apiService';\nclass SensorController {\n  /**\r\n   * Check if data is fresh for a specific data type\r\n   * @param {string} dataType - Type of data (readings, history, alerts)\r\n   * @param {string} [subType] - Subtype for history data (temperature, humidity, etc.)\r\n   * @returns {boolean} True if data is fresh, false otherwise\r\n   */\n  static isDataFresh(dataType, subType = null) {\n    const now = Date.now();\n    if (dataType === 'history' && subType) {\n      // For history data with subtype (like temperature or humidity)\n      if (!this.sensorDataTimestamps.history[subType]) return false;\n      return now - this.sensorDataTimestamps.history[subType] < this.cacheTTL.history;\n    }\n\n    // For other data types\n    return now - this.sensorDataTimestamps[dataType] < this.cacheTTL[dataType];\n  }\n\n  /**\r\n   * Update timestamp for a specific data type\r\n   * @param {string} dataType - Type of data (readings, history, alerts)\r\n   * @param {string} [subType] - Subtype for history data (temperature, humidity, etc.)\r\n   */\n  static updateTimestamp(dataType, subType = null) {\n    const now = Date.now();\n    if (dataType === 'history' && subType) {\n      if (!this.sensorDataTimestamps.history[subType]) {\n        this.sensorDataTimestamps.history[subType] = now;\n      } else {\n        this.sensorDataTimestamps.history[subType] = now;\n      }\n    } else {\n      this.sensorDataTimestamps[dataType] = now;\n    }\n  }\n\n  /**\r\n   * Get latest sensor readings with automatic cache management\r\n   * @param {boolean} [forceFresh=false] - Force fetching fresh data\r\n   * @returns {Promise<Object>} Latest sensor reading data\r\n   */\n  static async getLatestReadings(forceFresh = false) {\n    try {\n      if (!this.isDataFresh('readings') || forceFresh) {\n        console.log('Fetching latest sensor readings from API');\n\n        // Add cache buster to prevent caching\n        const cacheBuster = `?_t=${Date.now()}`;\n        const response = await apiService.get('/sensors/readings' + cacheBuster);\n        if (response.data && response.data.data) {\n          const data = response.data.data;\n          console.log('API response data:', data);\n\n          // Update timestamp for this data type\n          this.updateTimestamp('readings');\n          return {\n            // Đảm bảo là số trước khi định dạng\n            temperature: (typeof data.temperature === 'number' ? data.temperature : parseFloat(data.temperature || 0)).toFixed(1),\n            humidity: (typeof data.humidity === 'number' ? data.humidity : parseFloat(data.humidity || 0)).toFixed(1),\n            motion: Boolean(data.motion)\n          };\n        }\n        console.warn('API response structure:', JSON.stringify(response.data));\n        throw new Error('Invalid data format received from API');\n      } else {\n        console.log('Using cached sensor readings');\n      }\n\n      // Fallback to mock data\n      return {\n        temperature: '25.0',\n        humidity: '60.0',\n        motion: false\n      };\n    } catch (error) {\n      console.error('Error fetching sensor readings:', error);\n      // Fallback to mock data\n      return {\n        temperature: '25.0',\n        humidity: '60.0',\n        motion: false\n      };\n    }\n  }\n\n  /**\r\n   * Get sensor history data with cache management\r\n   * @param {string} sensorType - Type of sensor (temperature, humidity, motion)\r\n   * @param {string} timeRange - Time range for the history data (day, week)\r\n   * @param {boolean} [forceFresh=false] - Force fetching fresh data\r\n   * @returns {Promise<Array>} Sensor history data\r\n   */\n  static async getSensorHistory(sensorType, timeRange = 'day', forceFresh = false) {\n    try {\n      if (!this.isDataFresh('history', sensorType) || forceFresh) {\n        // Lấy dữ liệu từ API\n        const limit = timeRange === 'day' ? 24 : 168; // 24 hours or 7 days (168 hours)\n        const cacheBuster = `?limit=${limit}&_t=${Date.now()}`;\n        const response = await apiService.get(`/sensors/history/${sensorType}${cacheBuster}`);\n        if (response.data && response.data.data) {\n          // Update timestamp for this history subtype\n          this.updateTimestamp('history', sensorType);\n          return response.data.data;\n        }\n        console.warn('API response structure:', JSON.stringify(response.data));\n        throw new Error('Invalid data format received from API');\n      } else {\n        console.log(`Using cached ${sensorType} history data`);\n      }\n\n      // Fallback to mock data\n      const now = new Date();\n      const data = [];\n\n      // Generate mock data points\n      if (timeRange === 'day') {\n        // 24 hours, one point per hour\n        for (let i = 23; i >= 0; i--) {\n          const timestamp = new Date(now);\n          timestamp.setHours(now.getHours() - i);\n          let value;\n          if (sensorType === 'temperature') {\n            value = (Math.random() * 5 + 25).toFixed(1); // 25-30 degrees\n          } else if (sensorType === 'humidity') {\n            value = (Math.random() * 10 + 60).toFixed(1); // 60-70%\n          } else {\n            value = Math.random() > 0.8 ? 1 : 0; // Motion detected randomly\n          }\n          data.push({\n            timestamp: timestamp.toISOString(),\n            value: parseFloat(value)\n          });\n        }\n      }\n      return data;\n    } catch (error) {\n      console.error(`Error fetching ${sensorType} history:`, error);\n      return this.generateMockHistoryData(sensorType, timeRange);\n    }\n  }\n\n  /**\r\n   * Generate mock history data for testing\r\n   * @param {string} sensorType - Type of sensor\r\n   * @param {string} timeRange - Time range\r\n   * @returns {Array} Generated mock data\r\n   */\n  static generateMockHistoryData(sensorType, timeRange = 'day') {\n    const now = new Date();\n    const data = [];\n    const points = timeRange === 'day' ? 24 : 7;\n    const interval = timeRange === 'day' ? 1 : 24; // hours\n\n    for (let i = points - 1; i >= 0; i--) {\n      const timestamp = new Date(now);\n      if (timeRange === 'day') {\n        timestamp.setHours(now.getHours() - i);\n      } else {\n        timestamp.setDate(now.getDate() - i);\n      }\n      let value;\n      if (sensorType === 'temperature') {\n        // Create a realistic temperature pattern\n        const baseTemp = 25;\n        const timeOfDay = timeRange === 'day' ? (24 - i) % 24 : 12;\n        const dayCycle = Math.sin((timeOfDay - 6) * Math.PI / 12) * 3; // Peak at noon\n        value = (baseTemp + dayCycle + (Math.random() * 1.5 - 0.75)).toFixed(1);\n      } else if (sensorType === 'humidity') {\n        // Inverse relationship with temperature\n        const timeOfDay = timeRange === 'day' ? (24 - i) % 24 : 12;\n        const dayCycle = -Math.sin((timeOfDay - 6) * Math.PI / 12) * 10;\n        value = (60 + dayCycle + (Math.random() * 5 - 2.5)).toFixed(1);\n      } else {\n        // Motion typically during day hours\n        const hour = timestamp.getHours();\n        const isActiveHour = hour >= 7 && hour <= 22;\n        value = isActiveHour && Math.random() > 0.6 ? 1 : 0;\n      }\n      data.push({\n        timestamp: timestamp.toISOString(),\n        value: sensorType === 'motion' ? value : parseFloat(value)\n      });\n    }\n    return data;\n  }\n\n  /**\r\n   * Get recent alerts with cache management\r\n   * @param {boolean} [forceFresh=false] - Force fetching fresh data\r\n   * @returns {Promise<Array>} Recent alerts\r\n   */\n  static async getRecentAlerts(forceFresh = false) {\n    try {\n      if (!this.isDataFresh('alerts') || forceFresh) {\n        // Fetch real alerts from API with cache buster\n        const cacheBuster = `?_t=${Date.now()}`;\n        const response = await apiService.get('/alerts/recent' + cacheBuster);\n        if (response.data && response.data.data && Array.isArray(response.data.data)) {\n          // Update timestamp for alerts\n          this.updateTimestamp('alerts');\n          return response.data.data.map(alert => ({\n            id: alert.alert_id,\n            type: alert.alert_type.toLowerCase(),\n            message: alert.amessage,\n            timestamp: alert.alerted_time,\n            status: alert.status\n          }));\n        }\n\n        // Fallback to mock data if API fails or returns unexpected format\n        return this.getMockAlerts();\n      } else {\n        console.log('Using cached alerts data');\n        return this.getMockAlerts();\n      }\n    } catch (error) {\n      console.error('Error fetching alerts:', error);\n      // Fallback to mock data\n      return this.getMockAlerts();\n    }\n  }\n  static getMockAlerts() {\n    return [{\n      id: 1,\n      type: 'temperature',\n      message: 'Temperature exceeded 30°C',\n      timestamp: new Date(Date.now() - 30 * 60000).toISOString(),\n      status: 'active'\n    }, {\n      id: 2,\n      type: 'motion',\n      message: 'Motion detected in living room',\n      timestamp: new Date(Date.now() - 45 * 60000).toISOString(),\n      status: 'active'\n    }, {\n      id: 3,\n      type: 'humidity',\n      message: 'Humidity level below 30%',\n      timestamp: new Date(Date.now() - 120 * 60000).toISOString(),\n      status: 'resolved'\n    }];\n  }\n}\n// Cached data timestamps\nSensorController.sensorDataTimestamps = {\n  readings: 0,\n  history: {},\n  alerts: 0\n};\n// Cache TTL values in milliseconds\nSensorController.cacheTTL = {\n  readings: 5000,\n  // 5 seconds for current readings\n  history: 60000,\n  // 1 minute for history data\n  alerts: 30000 // 30 seconds for alerts\n};\nexport default SensorController;","map":{"version":3,"names":["apiService","SensorController","isDataFresh","dataType","subType","now","Date","sensorDataTimestamps","history","cacheTTL","updateTimestamp","getLatestReadings","forceFresh","console","log","cacheBuster","response","get","data","temperature","parseFloat","toFixed","humidity","motion","Boolean","warn","JSON","stringify","Error","error","getSensorHistory","sensorType","timeRange","limit","i","timestamp","setHours","getHours","value","Math","random","push","toISOString","generateMockHistoryData","points","interval","setDate","getDate","baseTemp","timeOfDay","dayCycle","sin","PI","hour","isActiveHour","getRecentAlerts","Array","isArray","map","alert","id","alert_id","type","alert_type","toLowerCase","message","amessage","alerted_time","status","getMockAlerts","readings","alerts"],"sources":["C:/Users/tuana/University/The_Third_Year/HK242/Đồ án đa ngành/YoloHome_DADN/YoloHome_DADN/frontend/src/controllers/SensorController.js"],"sourcesContent":["import apiService from '../services/apiService';\r\n\r\nclass SensorController {\r\n  // Cached data timestamps\r\n  static sensorDataTimestamps = {\r\n    readings: 0,\r\n    history: {},\r\n    alerts: 0\r\n  };\r\n  \r\n  // Cache TTL values in milliseconds\r\n  static cacheTTL = {\r\n    readings: 5000,  // 5 seconds for current readings\r\n    history: 60000,  // 1 minute for history data\r\n    alerts: 30000    // 30 seconds for alerts\r\n  };\r\n  \r\n  /**\r\n   * Check if data is fresh for a specific data type\r\n   * @param {string} dataType - Type of data (readings, history, alerts)\r\n   * @param {string} [subType] - Subtype for history data (temperature, humidity, etc.)\r\n   * @returns {boolean} True if data is fresh, false otherwise\r\n   */\r\n  static isDataFresh(dataType, subType = null) {\r\n    const now = Date.now();\r\n    \r\n    if (dataType === 'history' && subType) {\r\n      // For history data with subtype (like temperature or humidity)\r\n      if (!this.sensorDataTimestamps.history[subType]) return false;\r\n      return (now - this.sensorDataTimestamps.history[subType]) < this.cacheTTL.history;\r\n    }\r\n    \r\n    // For other data types\r\n    return (now - this.sensorDataTimestamps[dataType]) < this.cacheTTL[dataType];\r\n  }\r\n  \r\n  /**\r\n   * Update timestamp for a specific data type\r\n   * @param {string} dataType - Type of data (readings, history, alerts)\r\n   * @param {string} [subType] - Subtype for history data (temperature, humidity, etc.)\r\n   */\r\n  static updateTimestamp(dataType, subType = null) {\r\n    const now = Date.now();\r\n    \r\n    if (dataType === 'history' && subType) {\r\n      if (!this.sensorDataTimestamps.history[subType]) {\r\n        this.sensorDataTimestamps.history[subType] = now;\r\n      } else {\r\n        this.sensorDataTimestamps.history[subType] = now;\r\n      }\r\n    } else {\r\n      this.sensorDataTimestamps[dataType] = now;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get latest sensor readings with automatic cache management\r\n   * @param {boolean} [forceFresh=false] - Force fetching fresh data\r\n   * @returns {Promise<Object>} Latest sensor reading data\r\n   */\r\n  static async getLatestReadings(forceFresh = false) {\r\n    try {\r\n      if (!this.isDataFresh('readings') || forceFresh) {\r\n        console.log('Fetching latest sensor readings from API');\r\n        \r\n        // Add cache buster to prevent caching\r\n        const cacheBuster = `?_t=${Date.now()}`;\r\n        const response = await apiService.get('/sensors/readings' + cacheBuster);\r\n        \r\n        if (response.data && response.data.data) {\r\n          const data = response.data.data;\r\n          console.log('API response data:', data);\r\n          \r\n          // Update timestamp for this data type\r\n          this.updateTimestamp('readings');\r\n          \r\n          return {\r\n            // Đảm bảo là số trước khi định dạng\r\n            temperature: (typeof data.temperature === 'number' ? data.temperature : parseFloat(data.temperature || 0)).toFixed(1),\r\n            humidity: (typeof data.humidity === 'number' ? data.humidity : parseFloat(data.humidity || 0)).toFixed(1),\r\n            motion: Boolean(data.motion)\r\n          };\r\n        }\r\n        \r\n        console.warn('API response structure:', JSON.stringify(response.data));\r\n        throw new Error('Invalid data format received from API');\r\n      } else {\r\n        console.log('Using cached sensor readings');\r\n      }\r\n      \r\n      // Fallback to mock data\r\n      return {\r\n        temperature: '25.0',\r\n        humidity: '60.0',\r\n        motion: false\r\n      };\r\n    } catch (error) {\r\n      console.error('Error fetching sensor readings:', error);\r\n      // Fallback to mock data\r\n      return {\r\n        temperature: '25.0',\r\n        humidity: '60.0',\r\n        motion: false\r\n      };\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Get sensor history data with cache management\r\n   * @param {string} sensorType - Type of sensor (temperature, humidity, motion)\r\n   * @param {string} timeRange - Time range for the history data (day, week)\r\n   * @param {boolean} [forceFresh=false] - Force fetching fresh data\r\n   * @returns {Promise<Array>} Sensor history data\r\n   */\r\n  static async getSensorHistory(sensorType, timeRange = 'day', forceFresh = false) {\r\n    try {\r\n      if (!this.isDataFresh('history', sensorType) || forceFresh) {\r\n        // Lấy dữ liệu từ API\r\n        const limit = timeRange === 'day' ? 24 : 168; // 24 hours or 7 days (168 hours)\r\n        const cacheBuster = `?limit=${limit}&_t=${Date.now()}`;\r\n        const response = await apiService.get(`/sensors/history/${sensorType}${cacheBuster}`);\r\n        \r\n        if (response.data && response.data.data) {\r\n          // Update timestamp for this history subtype\r\n          this.updateTimestamp('history', sensorType);\r\n          return response.data.data;\r\n        }\r\n        \r\n        console.warn('API response structure:', JSON.stringify(response.data));\r\n        throw new Error('Invalid data format received from API');\r\n      } else {\r\n        console.log(`Using cached ${sensorType} history data`);\r\n      }\r\n      \r\n      // Fallback to mock data\r\n      const now = new Date();\r\n      const data = [];\r\n      \r\n      // Generate mock data points\r\n      if (timeRange === 'day') {\r\n        // 24 hours, one point per hour\r\n        for (let i = 23; i >= 0; i--) {\r\n          const timestamp = new Date(now);\r\n          timestamp.setHours(now.getHours() - i);\r\n          \r\n          let value;\r\n          if (sensorType === 'temperature') {\r\n            value = (Math.random() * 5 + 25).toFixed(1); // 25-30 degrees\r\n          } else if (sensorType === 'humidity') {\r\n            value = (Math.random() * 10 + 60).toFixed(1); // 60-70%\r\n          } else {\r\n            value = Math.random() > 0.8 ? 1 : 0; // Motion detected randomly\r\n          }\r\n          \r\n          data.push({\r\n            timestamp: timestamp.toISOString(),\r\n            value: parseFloat(value)\r\n          });\r\n        }\r\n      }\r\n      \r\n      return data;\r\n    } catch (error) {\r\n      console.error(`Error fetching ${sensorType} history:`, error);\r\n      return this.generateMockHistoryData(sensorType, timeRange);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Generate mock history data for testing\r\n   * @param {string} sensorType - Type of sensor\r\n   * @param {string} timeRange - Time range\r\n   * @returns {Array} Generated mock data\r\n   */\r\n  static generateMockHistoryData(sensorType, timeRange = 'day') {\r\n    const now = new Date();\r\n    const data = [];\r\n    const points = timeRange === 'day' ? 24 : 7;\r\n    const interval = timeRange === 'day' ? 1 : 24; // hours\r\n    \r\n    for (let i = points - 1; i >= 0; i--) {\r\n      const timestamp = new Date(now);\r\n      if (timeRange === 'day') {\r\n        timestamp.setHours(now.getHours() - i);\r\n      } else {\r\n        timestamp.setDate(now.getDate() - i);\r\n      }\r\n      \r\n      let value;\r\n      if (sensorType === 'temperature') {\r\n        // Create a realistic temperature pattern\r\n        const baseTemp = 25;\r\n        const timeOfDay = timeRange === 'day' ? (24 - i) % 24 : 12;\r\n        const dayCycle = Math.sin((timeOfDay - 6) * Math.PI / 12) * 3; // Peak at noon\r\n        value = (baseTemp + dayCycle + (Math.random() * 1.5 - 0.75)).toFixed(1);\r\n      } else if (sensorType === 'humidity') {\r\n        // Inverse relationship with temperature\r\n        const timeOfDay = timeRange === 'day' ? (24 - i) % 24 : 12;\r\n        const dayCycle = -Math.sin((timeOfDay - 6) * Math.PI / 12) * 10;\r\n        value = (60 + dayCycle + (Math.random() * 5 - 2.5)).toFixed(1);\r\n      } else {\r\n        // Motion typically during day hours\r\n        const hour = timestamp.getHours();\r\n        const isActiveHour = hour >= 7 && hour <= 22;\r\n        value = isActiveHour && Math.random() > 0.6 ? 1 : 0;\r\n      }\r\n      \r\n      data.push({\r\n        timestamp: timestamp.toISOString(),\r\n        value: sensorType === 'motion' ? value : parseFloat(value)\r\n      });\r\n    }\r\n    \r\n    return data;\r\n  }\r\n  \r\n  /**\r\n   * Get recent alerts with cache management\r\n   * @param {boolean} [forceFresh=false] - Force fetching fresh data\r\n   * @returns {Promise<Array>} Recent alerts\r\n   */\r\n  static async getRecentAlerts(forceFresh = false) {\r\n    try {\r\n      if (!this.isDataFresh('alerts') || forceFresh) {\r\n        // Fetch real alerts from API with cache buster\r\n        const cacheBuster = `?_t=${Date.now()}`;\r\n        const response = await apiService.get('/alerts/recent' + cacheBuster);\r\n        \r\n        if (response.data && response.data.data && Array.isArray(response.data.data)) {\r\n          // Update timestamp for alerts\r\n          this.updateTimestamp('alerts');\r\n          \r\n          return response.data.data.map(alert => ({\r\n            id: alert.alert_id,\r\n            type: alert.alert_type.toLowerCase(),\r\n            message: alert.amessage,\r\n            timestamp: alert.alerted_time,\r\n            status: alert.status\r\n          }));\r\n        }\r\n        \r\n        // Fallback to mock data if API fails or returns unexpected format\r\n        return this.getMockAlerts();\r\n      } else {\r\n        console.log('Using cached alerts data');\r\n        return this.getMockAlerts();\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching alerts:', error);\r\n      // Fallback to mock data\r\n      return this.getMockAlerts();\r\n    }\r\n  }\r\n  \r\n  static getMockAlerts() {\r\n    return [\r\n      {\r\n        id: 1,\r\n        type: 'temperature',\r\n        message: 'Temperature exceeded 30°C',\r\n        timestamp: new Date(Date.now() - 30 * 60000).toISOString(),\r\n        status: 'active'\r\n      },\r\n      {\r\n        id: 2,\r\n        type: 'motion',\r\n        message: 'Motion detected in living room',\r\n        timestamp: new Date(Date.now() - 45 * 60000).toISOString(),\r\n        status: 'active'\r\n      },\r\n      {\r\n        id: 3,\r\n        type: 'humidity',\r\n        message: 'Humidity level below 30%',\r\n        timestamp: new Date(Date.now() - 120 * 60000).toISOString(),\r\n        status: 'resolved'\r\n      }\r\n    ];\r\n  }\r\n}\r\n\r\nexport default SensorController;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}